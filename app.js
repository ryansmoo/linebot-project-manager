require('dotenv').config();
const line = require('@line/bot-sdk');
const express = require('express');
const path = require('path');
const OpenAI = require('openai');
const database = require('./database');

const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN || 'CnT5EpvP2ATp1hWRMB69uDRk9AzmO5+34Pd1QkrcxFe6NTDloT2olr5sNKbX5vJjVUxav5EPSMagBHYt328GPCLK6KE1ZL70JFX2vswFSiTdlCd3VP5GEwQ3xTyKJhfuW3Qt3gT27zPsihcGBCLevQdB04t89/1O/w1cDnyilFU=',
  channelSecret: process.env.LINE_CHANNEL_SECRET || 'eaaf339ed4aa0a351b5893f10d4581c5'
};

const client = new line.Client(config);

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// ‰ªªÂãôÂÑ≤Â≠òÁ≥ªÁµ±ÔºàË®òÊÜ∂È´îÂÑ≤Â≠òÔºåÊåâÁî®Êà∂IDÂàÜÁµÑÔºâ
const userTasks = new Map();

// ÊúÉÂì°Á≥ªÁµ±Ë≥áÊñôÁµêÊßã
const members = new Map(); // memberId -> memberData
const lineBindings = new Map(); // lineUserId -> memberId
const memberSessions = new Map(); // sessionId -> memberData

// ÊúÉÂì°Ë≥áÊñôÁµêÊßã
function createMember(email, name, lineUserId = null) {
  const memberId = 'member_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  const member = {
    id: memberId,
    email: email,
    name: name,
    lineUserId: lineUserId,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    isActive: true,
    settings: {
      chatMode: 'smart', // smart, task, chat
      notifications: true,
      theme: 'default'
    },
    profile: {
      avatar: null,
      bio: '',
      timezone: 'Asia/Taipei'
    }
  };
  
  members.set(memberId, member);
  
  if (lineUserId) {
    lineBindings.set(lineUserId, memberId);
  }
  
  return member;
}

// Ê†πÊìöLINE UserIdÁç≤ÂèñÊúÉÂì°Ë≥áÊñô
function getMemberByLineUserId(lineUserId) {
  const memberId = lineBindings.get(lineUserId);
  return memberId ? members.get(memberId) : null;
}

// Á∂ÅÂÆöLINE UserIdÂà∞ÊúÉÂì°Â∏≥Ëôü
function bindLineToMember(memberId, lineUserId) {
  const member = members.get(memberId);
  if (!member) return false;
  
  member.lineUserId = lineUserId;
  member.updatedAt = new Date().toISOString();
  lineBindings.set(lineUserId, memberId);
  
  return true;
}

// ‰ªªÂãôÁÆ°ÁêÜÂäüËÉΩ
function addTask(userId, taskText) {
  if (!userTasks.has(userId)) {
    userTasks.set(userId, []);
  }
  
  const task = {
    id: Date.now(),
    text: taskText,
    timestamp: new Date().toISOString(),
    date: new Date().toLocaleDateString('zh-TW')
  };
  
  userTasks.get(userId).push(task);
  console.log(`Added task for user ${userId}: ${taskText}`);
  return task;
}

function getTodayTasks(userId) {
  if (!userTasks.has(userId)) {
    return [];
  }
  
  const today = new Date().toLocaleDateString('zh-TW');
  return userTasks.get(userId).filter(task => task.date === today);
}

function getAllTasks(userId) {
  return userTasks.get(userId) || [];
}

const app = express();

// Áî®ÊñºÂ≠òÂÑ≤ OAuth ÁãÄÊÖã
const oauthStates = new Map();

// JSON Ëß£Êûê‰∏≠Èñì‰ª∂ÔºàÂè™Áî®Êñº API Ë∑ØÁî±Ôºâ
app.use('/api', express.json());

app.get('/stats', (req, res) => {
  const totalUsers = userTasks.size;
  const totalTasks = Array.from(userTasks.values()).reduce((total, tasks) => total + tasks.length, 0);
  
  res.json({ 
    status: 'üìù Ë®ò‰∫ãÊ©üÂô®‰∫∫ Running',
    timestamp: new Date().toISOString(),
    features: [
      'üìã ‰ªªÂãôË®òÈåÑËàáÁÆ°ÁêÜ', 
      'üì± Flex MessageÂç°Áâá', 
      'ü§ñ ChatGPTÊô∫ËÉΩÂõûË¶Ü',
      'üîê LINE LoginÊúÉÂì°Á≥ªÁµ±',
      'üë§ ÂÄã‰∫∫ÂåñË®≠ÂÆöÁÆ°ÁêÜ'
    ],
    endpoints: {
      webhook: '/webhook',
      health: '/health',
      auth: '/auth',
      member_profile: '/profile/:userId'
    },
    stats: {
      totalUsers: totalUsers,
      totalTasks: totalTasks
    },
    ai: {
      enabled: !!process.env.OPENAI_API_KEY,
      model: process.env.OPENAI_MODEL || 'gpt-3.5-turbo'
    },
    usage: {
      addTask: 'Áõ¥Êé•Ëº∏ÂÖ•‰ªªÂãôÔºå‰æãÂ¶ÇÔºö„Äå17:00Â∞èÁæéÁ¥ÑÊúÉ„Äç',
      listTasks: 'Ë©¢ÂïèÔºö„Äå‰ªäÂ§©ÊàëÁöÑ‰ªªÂãôÊúâÂì™‰∫õÔºü„Äç',
      help: 'Ëº∏ÂÖ•Ôºö„ÄåÂπ´Âä©„ÄçÊü•ÁúãÂÆåÊï¥Ë™™Êòé'
    }
  });
});

// LINE Login Ë®ªÂÜäÈ†ÅÈù¢
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'line_register.html'));
});

// OAuth Ê∫ñÂÇôÈöéÊÆµ API
app.post('/api/line-oauth/prepare', (req, res) => {
  try {
    const { state, referrer } = req.body;
    const clientIP = req.ip || req.connection.remoteAddress;
    
    console.log(`[OAuth] Ê∫ñÂÇôÁãÄÊÖã: ${state} (IP: ${clientIP})`);
    
    // È©óË≠âÁãÄÊÖãÂèÉÊï∏
    if (!state || state.length !== 64) {
      return res.status(400).json({
        success: false,
        error: 'invalid_state',
        message: 'ÁÑ°ÊïàÁöÑÁãÄÊÖãÂèÉÊï∏'
      });
    }
    
    // ÂÑ≤Â≠òÁãÄÊÖãË≥áË®äÔºà15ÂàÜÈêòÈÅéÊúüÔºâ
    const stateData = {
      token: state,
      ipAddress: clientIP,
      referrer: referrer,
      createdAt: new Date(),
      expiresAt: new Date(Date.now() + 15 * 60 * 1000), // 15ÂàÜÈêò
      isUsed: false
    };
    
    oauthStates.set(state, stateData);
    
    // Ê∏ÖÁêÜÈÅéÊúüÁãÄÊÖã
    cleanupExpiredStates();
    
    res.json({
      success: true,
      state: state,
      message: 'Ê∫ñÂÇôÂÆåÊàêÔºåÂç≥Â∞áË∑≥ËΩâÂà∞ LINE ÊéàÊ¨äÈ†ÅÈù¢'
    });
    
  } catch (error) {
    console.error('[OAuth] Ê∫ñÂÇôÊµÅÁ®ãÈåØË™§:', error);
    res.status(500).json({
      success: false,
      error: 'server_error',
      message: '‰º∫ÊúçÂô®ÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶'
    });
  }
});

// Ê∏ÖÁêÜÈÅéÊúüÁãÄÊÖãÁöÑÂáΩÊï∏
function cleanupExpiredStates() {
  try {
    const now = new Date();
    let cleanedCount = 0;
    
    for (const [state, data] of oauthStates.entries()) {
      if (now > data.expiresAt) {
        oauthStates.delete(state);
        cleanedCount++;
      }
    }
    
    if (cleanedCount > 0) {
      console.log(`[Ê∏ÖÁêÜ] Ê∏ÖÈô§‰∫Ü ${cleanedCount} ÂÄãÈÅéÊúüÁãÄÊÖã`);
    }
  } catch (error) {
    console.error('[Ê∏ÖÁêÜ] Ê∏ÖÁêÜÁãÄÊÖãÂ§±Êïó:', error);
  }
}

app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    bot: 'running',
    ai: {
      enabled: !!process.env.OPENAI_API_KEY,
      model: process.env.OPENAI_MODEL || 'gpt-3.5-turbo'
    }
  });
});

// ‰ªªÂãôÁ∂≤È†ÅË∑ØÁî±
app.get('/tasks/:userId', (req, res) => {
  const userId = req.params.userId;
  const todayTasks = getTodayTasks(userId);
  const today = new Date().toLocaleDateString('zh-TW');
  
  const html = `
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìù ‰ªäÊó•ÂæÖËæ¶‰∫ãÈ†Ö</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 600px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #2196F3 0%, #21CBF3 100%);
            color: white;
            padding: 30px 20px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 28px;
            margin-bottom: 10px;
            font-weight: 700;
        }
        
        .header .date {
            font-size: 16px;
            opacity: 0.9;
            margin-bottom: 10px;
        }
        
        .header .count {
            font-size: 14px;
            background: rgba(255,255,255,0.2);
            padding: 8px 16px;
            border-radius: 20px;
            display: inline-block;
        }
        
        .content {
            padding: 30px 20px;
        }
        
        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #666;
        }
        
        .empty-state .icon {
            font-size: 64px;
            margin-bottom: 20px;
        }
        
        .empty-state h3 {
            font-size: 24px;
            margin-bottom: 10px;
            color: #333;
        }
        
        .empty-state p {
            font-size: 16px;
            line-height: 1.6;
        }
        
        .task-list {
            list-style: none;
        }
        
        .task-item {
            background: #f8f9fa;
            margin-bottom: 15px;
            padding: 20px;
            border-radius: 12px;
            border-left: 4px solid #2196F3;
            transition: transform 0.2s, box-shadow 0.2s;
            position: relative;
        }
        
        .task-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }
        
        .task-item:nth-child(even) {
            border-left-color: #9C27B0;
        }
        
        .task-item:nth-child(3n) {
            border-left-color: #FF9800;
        }
        
        .task-number {
            position: absolute;
            top: -8px;
            left: -8px;
            background: #2196F3;
            color: white;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
        }
        
        .task-text {
            font-size: 18px;
            color: #333;
            margin-bottom: 8px;
            padding-left: 10px;
            line-height: 1.4;
        }
        
        .task-time {
            font-size: 12px;
            color: #888;
            padding-left: 10px;
        }
        
        .footer {
            background: #f8f9fa;
            padding: 20px;
            text-align: center;
            border-top: 1px solid #e9ecef;
        }
        
        .footer p {
            color: #666;
            font-size: 14px;
            margin-bottom: 10px;
        }
        
        .footer .logo {
            color: #2196F3;
            font-weight: bold;
        }
        
        .refresh-btn {
            background: #2196F3;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
            transition: background 0.2s;
        }
        
        .refresh-btn:hover {
            background: #1976D2;
        }
        
        .stats {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 10px;
        }
        
        .stat-item {
            text-align: center;
        }
        
        .stat-number {
            font-size: 20px;
            font-weight: bold;
            color: white;
        }
        
        .stat-label {
            font-size: 12px;
            opacity: 0.8;
        }
        
        @media (max-width: 480px) {
            body {
                padding: 10px;
            }
            
            .header {
                padding: 20px 15px;
            }
            
            .header h1 {
                font-size: 24px;
            }
            
            .content {
                padding: 20px 15px;
            }
            
            .task-text {
                font-size: 16px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìù ‰ªäÊó•ÂæÖËæ¶‰∫ãÈ†Ö</h1>
            <div class="date">${today}</div>
            <div class="count">ÂÖ± ${todayTasks.length} È†Ö‰ªªÂãô</div>
            <div class="stats">
                <div class="stat-item">
                    <div class="stat-number">${todayTasks.length}</div>
                    <div class="stat-label">ÂæÖËæ¶‰∫ãÈ†Ö</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${new Date().getHours()}</div>
                    <div class="stat-label">Áï∂ÂâçÊôÇÈñì</div>
                </div>
            </div>
        </div>
        
        <div class="content">
            ${todayTasks.length === 0 ? `
                <div class="empty-state">
                    <div class="icon">üéâ</div>
                    <h3>‰ªäÊó•‰ªªÂãôÂÖ®ÈÉ®ÂÆåÊàêÔºÅ</h3>
                    <p>ÊÇ®‰ªäÂ§©ÈÇÑÊ≤íÊúâ‰ªª‰ΩïÂæÖËæ¶‰∫ãÈ†Ö<br>
                    Âú®LINE‰∏≠ÂÇ≥ÈÄÅ‰ªªÂãôÁµ¶Ê©üÂô®‰∫∫‰æÜÊñ∞Â¢ûÂæÖËæ¶‰∫ãÈ†Ö<br>
                    ‰æãÂ¶ÇÔºö„Äå17:00Â∞èÁæéÁ¥ÑÊúÉ„Äç</p>
                </div>
            ` : `
                <ul class="task-list">
                    ${todayTasks.map((task, index) => `
                        <li class="task-item">
                            <div class="task-number">${index + 1}</div>
                            <div class="task-text">${task.text}</div>
                            <div class="task-time">Êñ∞Â¢ûÊñº ${new Date(task.timestamp).toLocaleTimeString('zh-TW')}</div>
                        </li>
                    `).join('')}
                </ul>
            `}
        </div>
        
        <div class="footer">
            <p>Áî± <span class="logo">üìù Ë®ò‰∫ãÊ©üÂô®‰∫∫</span> ÁÇ∫ÊÇ®ÊúçÂãô</p>
            <button class="refresh-btn" onclick="window.location.reload()">üîÑ ÈáçÊñ∞Êï¥ÁêÜ</button>
        </div>
    </div>

    <script>
        // Ëá™ÂãïÂà∑Êñ∞ÂäüËÉΩ
        setInterval(() => {
            const refreshBtn = document.querySelector('.refresh-btn');
            if (refreshBtn) {
                refreshBtn.style.background = '#4CAF50';
                refreshBtn.innerHTML = 'üîÑ Ëá™ÂãïÊõ¥Êñ∞‰∏≠...';
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            }
        }, 60000); // ÊØè60ÁßíËá™ÂãïÂà∑Êñ∞

        // Ê∑ªÂä†ËºâÂÖ•ÂãïÁï´
        document.addEventListener('DOMContentLoaded', function() {
            const taskItems = document.querySelectorAll('.task-item');
            taskItems.forEach((item, index) => {
                item.style.opacity = '0';
                item.style.transform = 'translateY(20px)';
                setTimeout(() => {
                    item.style.transition = 'opacity 0.5s, transform 0.5s';
                    item.style.opacity = '1';
                    item.style.transform = 'translateY(0)';
                }, index * 100);
            });
        });
    </script>
</body>
</html>`;

  res.send(html);
});

// ‰ªªÂãôÁ∑®ËºØÈ†ÅÈù¢
app.get('/edit-task/:userId/:taskId', (req, res) => {
  const { userId, taskId } = req.params;
  const tasks = getAllTasks(userId);
  const task = tasks.find(t => t.id == taskId) || { text: '', id: taskId };
  
  const html = `
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‚úèÔ∏è Á∑®ËºØ‰ªªÂãô</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 600px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            padding: 30px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .header h1 {
            color: #2196F3;
            font-size: 28px;
            margin-bottom: 10px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-label {
            display: block;
            color: #333;
            font-weight: bold;
            margin-bottom: 8px;
        }
        
        .form-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 10px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        
        .form-input:focus {
            outline: none;
            border-color: #2196F3;
        }
        
        .btn {
            width: 100%;
            padding: 12px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-bottom: 10px;
        }
        
        .btn-primary {
            background-color: #2196F3;
            color: white;
        }
        
        .btn-primary:hover {
            background-color: #1976D2;
        }
        
        .btn-secondary {
            background-color: #ccc;
            color: #333;
        }
        
        .btn-secondary:hover {
            background-color: #bbb;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚úèÔ∏è Á∑®ËºØ‰ªªÂãô</h1>
        </div>
        
        <form id="editForm">
            <div class="form-group">
                <label class="form-label" for="taskText">‰ªªÂãôÂÖßÂÆπÔºö</label>
                <input type="text" id="taskText" name="taskText" class="form-input" value="${task.text}" placeholder="Ë´ãËº∏ÂÖ•‰ªªÂãôÂÖßÂÆπ...">
            </div>
            
            <button type="submit" class="btn btn-primary">üíæ ÂÑ≤Â≠òËÆäÊõ¥</button>
            <button type="button" class="btn btn-secondary" onclick="window.close()">‚ùå ÂèñÊ∂à</button>
        </form>
    </div>
    
    <script>
        document.getElementById('editForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const taskText = document.getElementById('taskText').value;
            
            if (!taskText.trim()) {
                alert('Ë´ãËº∏ÂÖ•‰ªªÂãôÂÖßÂÆπ');
                return;
            }
            
            try {
                const response = await fetch('/api/update-task', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        userId: '${userId}',
                        taskId: '${taskId}',
                        text: taskText
                    })
                });
                
                if (response.ok) {
                    alert('‰ªªÂãôÂ∑≤Êõ¥Êñ∞ÊàêÂäüÔºÅ');
                    window.close();
                } else {
                    alert('Êõ¥Êñ∞Â§±ÊïóÔºåË´ãÂÜçË©¶‰∏ÄÊ¨°');
                }
            } catch (error) {
                alert('ÁôºÁîüÈåØË™§ÔºåË´ãÂÜçË©¶‰∏ÄÊ¨°');
            }
        });
    </script>
</body>
</html>`;
  
  res.send(html);
});

// ‰ªäÊó•‰ªªÂãôÈ†ÅÈù¢
app.get('/today-tasks/:userId', (req, res) => {
  const userId = req.params.userId;
  const todayTasks = getTodayTasks(userId);
  const today = new Date().toLocaleDateString('zh-TW');
  
  const html = `
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìã Êú¨Êó•‰ªªÂãô</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 600px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #2196F3 0%, #21CBF3 100%);
            color: white;
            padding: 30px 20px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 28px;
            margin-bottom: 10px;
        }
        
        .content {
            padding: 30px 20px;
        }
        
        .task-item {
            background: #f8f9ff;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 15px;
            border-left: 5px solid #2196F3;
            animation: fadeIn 0.5s ease-in-out;
        }
        
        .task-number {
            color: #2196F3;
            font-weight: bold;
            font-size: 18px;
            margin-bottom: 5px;
        }
        
        .task-text {
            font-size: 16px;
            color: #333;
            margin-bottom: 8px;
        }
        
        .task-time {
            font-size: 12px;
            color: #888;
        }
        
        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #888;
        }
        
        .empty-icon {
            font-size: 48px;
            margin-bottom: 20px;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìã Êú¨Êó•‰ªªÂãô</h1>
            <div>${today}</div>
            <div>ÂÖ± ${todayTasks.length} È†Ö‰ªªÂãô</div>
        </div>
        
        <div class="content">
            ${todayTasks.length === 0 ? `
                <div class="empty-state">
                    <div class="empty-icon">üéâ</div>
                    <h3>‰ªäÊó•‰ªªÂãôÂÖ®ÈÉ®ÂÆåÊàêÔºÅ</h3>
                    <p>ÊÇ®‰ªäÂ§©ÈÇÑÊ≤íÊúâ‰ªª‰ΩïÂæÖËæ¶‰∫ãÈ†Ö</p>
                </div>
            ` : todayTasks.map((task, index) => `
                <div class="task-item" style="animation-delay: ${index * 0.1}s">
                    <div class="task-number">‚ë† ${index + 1}</div>
                    <div class="task-text">${task.text}</div>
                    <div class="task-time">Êñ∞Â¢ûÊñº ${new Date(task.timestamp).toLocaleTimeString('zh-TW')}</div>
                </div>
            `).join('')}
        </div>
    </div>
</body>
</html>`;
  
  res.send(html);
});

// ÂÖ®ÈÉ®‰ªªÂãôÈ†ÅÈù¢
app.get('/all-tasks/:userId', (req, res) => {
  const userId = req.params.userId;
  const allTasks = getAllTasks(userId);
  
  const html = `
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìù ÂÖ®ÈÉ®‰ªªÂãô</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 600px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #9C27B0 0%, #E91E63 100%);
            color: white;
            padding: 30px 20px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 28px;
            margin-bottom: 10px;
        }
        
        .content {
            padding: 30px 20px;
            max-height: 60vh;
            overflow-y: auto;
        }
        
        .task-item {
            background: #f8f9ff;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 15px;
            border-left: 5px solid #9C27B0;
            animation: fadeIn 0.5s ease-in-out;
        }
        
        .task-number {
            color: #9C27B0;
            font-weight: bold;
            font-size: 18px;
            margin-bottom: 5px;
        }
        
        .task-text {
            font-size: 16px;
            color: #333;
            margin-bottom: 8px;
        }
        
        .task-date {
            font-size: 12px;
            color: #888;
            margin-bottom: 5px;
        }
        
        .task-time {
            font-size: 12px;
            color: #aaa;
        }
        
        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #888;
        }
        
        .empty-icon {
            font-size: 48px;
            margin-bottom: 20px;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìù ÂÖ®ÈÉ®‰ªªÂãô</h1>
            <div>Á∏ΩÂÖ± ${allTasks.length} È†Ö‰ªªÂãô</div>
        </div>
        
        <div class="content">
            ${allTasks.length === 0 ? `
                <div class="empty-state">
                    <div class="empty-icon">üìù</div>
                    <h3>ÈÇÑÊ≤íÊúâ‰ªª‰Ωï‰ªªÂãô</h3>
                    <p>ÈñãÂßãÂú®LINE‰∏≠Êñ∞Â¢ûÊÇ®ÁöÑÁ¨¨‰∏ÄÂÄã‰ªªÂãôÂêßÔºÅ</p>
                </div>
            ` : allTasks.map((task, index) => `
                <div class="task-item" style="animation-delay: ${index * 0.1}s">
                    <div class="task-number">üìå ${index + 1}</div>
                    <div class="task-text">${task.text}</div>
                    <div class="task-date">Êó•ÊúüÔºö${task.date}</div>
                    <div class="task-time">ÊôÇÈñìÔºö${new Date(task.timestamp).toLocaleTimeString('zh-TW')}</div>
                </div>
            `).join('')}
        </div>
    </div>
</body>
</html>`;
  
  res.send(html);
});

// ÂÄã‰∫∫Â∏≥Êà∂Ë®≠ÂÆöÈ†ÅÈù¢
app.get('/profile/:userId', (req, res) => {
  const userId = req.params.userId;
  const allTasks = getAllTasks(userId);
  const todayTasks = getTodayTasks(userId);
  
  // Ê™¢Êü•ÊòØÂê¶ÊúâÁ∂ÅÂÆöÁöÑÊúÉÂì°Â∏≥Ëôü
  const member = getMemberByLineUserId(userId);
  const isLineBound = !!member;
  
  const html = `
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üë§ ÂÄã‰∫∫Â∏≥Êà∂</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 600px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #FF9800 0%, #FF5722 100%);
            color: white;
            padding: 30px 20px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 28px;
            margin-bottom: 10px;
        }
        
        .content {
            padding: 30px 20px;
        }
        
        .member-banner {
            background: linear-gradient(135deg, #00B900 0%, #009900 100%);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .member-banner.unbound {
            background: linear-gradient(135deg, #FF9800 0%, #FF5722 100%);
        }
        
        .member-status {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .status-icon {
            font-size: 20px;
        }
        
        .status-text {
            font-weight: bold;
            font-size: 16px;
        }
        
        .member-info {
            text-align: right;
        }
        
        .member-name {
            font-weight: bold;
            font-size: 18px;
            margin-bottom: 5px;
        }
        
        .member-email {
            opacity: 0.8;
            font-size: 14px;
        }
        
        .bind-action {
            text-align: right;
        }
        
        .bind-btn {
            background: white;
            color: #FF9800;
            padding: 10px 20px;
            border-radius: 8px;
            text-decoration: none;
            font-weight: bold;
            font-size: 14px;
            transition: all 0.3s;
        }
        
        .bind-btn:hover {
            background: #f0f0f0;
            transform: translateY(-2px);
        }
        
        .profile-info {
            background: #f8f9ff;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .info-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }
        
        .info-label {
            font-weight: bold;
            color: #333;
        }
        
        .info-value {
            color: #666;
        }
        
        .settings-section {
            margin-top: 30px;
        }
        
        .settings-title {
            font-size: 20px;
            color: #FF9800;
            margin-bottom: 15px;
            font-weight: bold;
        }
        
        .setting-item {
            background: #f8f9ff;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .setting-label {
            font-weight: bold;
            color: #333;
        }
        
        .setting-desc {
            font-size: 12px;
            color: #888;
            margin-top: 5px;
        }
        
        .toggle {
            width: 50px;
            height: 25px;
            background: #ccc;
            border-radius: 25px;
            position: relative;
            cursor: pointer;
            transition: background 0.3s;
        }
        
        .toggle.active {
            background: #4CAF50;
        }
        
        .toggle::after {
            content: '';
            width: 20px;
            height: 20px;
            background: white;
            border-radius: 50%;
            position: absolute;
            top: 2.5px;
            left: 2.5px;
            transition: transform 0.3s;
        }
        
        .toggle.active::after {
            transform: translateX(25px);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üë§ ÂÄã‰∫∫Â∏≥Êà∂</h1>
            <div>Áî®Êà∂ ID: ${userId.substring(0, 8)}...</div>
        </div>
        
        <div class="content">
            ${isLineBound ? `
            <div class="member-banner">
                <div class="member-status">
                    <span class="status-icon">‚úÖ</span>
                    <span class="status-text">ÊúÉÂì°Â∏≥ËôüÂ∑≤Á∂ÅÂÆö</span>
                </div>
                <div class="member-info">
                    <div class="member-name">${member.name}</div>
                    <div class="member-email">${member.email}</div>
                </div>
            </div>
            ` : `
            <div class="member-banner unbound">
                <div class="member-status">
                    <span class="status-icon">‚ö†Ô∏è</span>
                    <span class="status-text">Â∞öÊú™Á∂ÅÂÆöÊúÉÂì°Â∏≥Ëôü</span>
                </div>
                <div class="bind-action">
                    <a href="/auth" class="bind-btn">Á´ãÂç≥Ë®ªÂÜä/Á∂ÅÂÆö</a>
                </div>
            </div>
            `}
            
            <div class="profile-info">
                <div class="info-item">
                    <span class="info-label">üë§ LINEÁî®Êà∂</span>
                    <span class="info-value">${userId.substring(0, 8)}...</span>
                </div>
                <div class="info-item">
                    <span class="info-label">üìä Á∏Ω‰ªªÂãôÊï∏</span>
                    <span class="info-value">${allTasks.length} È†Ö</span>
                </div>
                <div class="info-item">
                    <span class="info-label">üìã ‰ªäÊó•‰ªªÂãô</span>
                    <span class="info-value">${todayTasks.length} È†Ö</span>
                </div>
                ${isLineBound ? `
                <div class="info-item">
                    <span class="info-label">üìÖ Ë®ªÂÜäÊó•Êúü</span>
                    <span class="info-value">${new Date(member.createdAt).toLocaleDateString('zh-TW')}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">üîó Á∂ÅÂÆöÁãÄÊÖã</span>
                    <span class="info-value" style="color: #00B900;">Â∑≤Á∂ÅÂÆö</span>
                </div>
                ` : `
                <div class="info-item">
                    <span class="info-label">üìÖ È¶ñÊ¨°‰ΩøÁî®</span>
                    <span class="info-value">${new Date().toLocaleDateString('zh-TW')}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">üîó ÊúÉÂì°ÁãÄÊÖã</span>
                    <span class="info-value" style="color: #FF9800;">Êú™Á∂ÅÂÆö</span>
                </div>
                `}
                <div class="info-item">
                    <span class="info-label">ü§ñ AIÊ®°Âûã</span>
                    <span class="info-value">ChatGPT-3.5</span>
                </div>
            </div>
            
            <div class="settings-section">
                <h3 class="settings-title">üîß ËÅäÂ§©Ê®°ÂºèË®≠ÂÆö</h3>
                
                <div class="setting-item">
                    <div>
                        <div class="setting-label">üß† Êô∫ËÉΩÊ®°Âºè</div>
                        <div class="setting-desc">Ëá™ÂãïË≠òÂà•‰ªªÂãô‰∏¶Êô∫ËÉΩÂõûË¶Ü</div>
                    </div>
                    <div class="toggle active" onclick="toggleSetting(this, 'smart')"></div>
                </div>
                
                <div class="setting-item">
                    <div>
                        <div class="setting-label">üìù ‰ªªÂãôÂÑ™ÂÖà</div>
                        <div class="setting-desc">ÂÑ™ÂÖàÂ∞áË®äÊÅØË≠òÂà•ÁÇ∫‰ªªÂãô</div>
                    </div>
                    <div class="toggle" onclick="toggleSetting(this, 'task')"></div>
                </div>
                
                <div class="setting-item">
                    <div>
                        <div class="setting-label">üí¨ Â∞çË©±Ê®°Âºè</div>
                        <div class="setting-desc">ÊâÄÊúâË®äÊÅØÈÉΩ‰ΩøÁî®AIÂ∞çË©±ÂõûË¶Ü</div>
                    </div>
                    <div class="toggle" onclick="toggleSetting(this, 'chat')"></div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        function toggleSetting(element, setting) {
            element.classList.toggle('active');
            const isActive = element.classList.contains('active');
            
            // ÈÄôË£°ÂèØ‰ª•ÁôºÈÄÅË®≠ÂÆöÂà∞ÂæåÁ´Ø
            console.log(\`Setting \${setting} changed to: \${isActive}\`);
            
            // Â¶ÇÊûúÈúÄË¶ÅÔºåÂèØ‰ª•ÁôºÈÄÅAJAXË´ãÊ±Ç‰øùÂ≠òË®≠ÂÆö
            fetch('/api/update-settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    userId: '${userId}',
                    setting: setting,
                    value: isActive
                })
            });
        }
    </script>
</body>
</html>`;
  
  res.send(html);
});

// APIË∑ØÁî± - Êõ¥Êñ∞‰ªªÂãô
app.post('/api/update-task', express.json(), (req, res) => {
  const { userId, taskId, text } = req.body;
  
  if (!userTasks.has(userId)) {
    return res.status(404).json({ error: 'User not found' });
  }
  
  const tasks = userTasks.get(userId);
  const taskIndex = tasks.findIndex(task => task.id == taskId);
  
  if (taskIndex === -1) {
    // Êñ∞Â¢û‰ªªÂãô
    const newTask = {
      id: parseInt(taskId),
      text: text,
      timestamp: new Date().toISOString(),
      date: new Date().toLocaleDateString('zh-TW')
    };
    tasks.push(newTask);
  } else {
    // Êõ¥Êñ∞ÁèæÊúâ‰ªªÂãô
    tasks[taskIndex].text = text;
    tasks[taskIndex].timestamp = new Date().toISOString();
  }
  
  res.json({ success: true });
});

app.post('/api/update-settings', express.json(), (req, res) => {
  const { userId, setting, value } = req.body;
  // ÈÄôË£°ÂèØ‰ª•‰øùÂ≠òÁî®Êà∂Ë®≠ÂÆöÂà∞Êï∏ÊìöÂ∫´
  console.log(`User ${userId} updated setting ${setting} to ${value}`);
  res.json({ success: true });
});

// ================================
// ÊúÉÂì°Á≥ªÁµ±Áõ∏ÈóúË∑ØÁî±
// ================================

// ÊúÉÂì°Ë®ªÂÜä/ÁôªÂÖ•È†ÅÈù¢
app.get('/auth', (req, res) => {
  const html = `
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üîê ÊúÉÂì°ÁôªÂÖ• - Ë®ò‰∫ãÊ©üÂô®‰∫∫</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        .auth-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            padding: 40px;
            max-width: 400px;
            width: 100%;
            text-align: center;
        }
        
        .logo {
            font-size: 48px;
            margin-bottom: 20px;
        }
        
        .title {
            font-size: 28px;
            color: #333;
            margin-bottom: 10px;
            font-weight: 700;
        }
        
        .subtitle {
            color: #666;
            margin-bottom: 30px;
            font-size: 16px;
        }
        
        .line-login-btn {
            background: #00B900;
            color: white;
            border: none;
            border-radius: 10px;
            padding: 15px 30px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            width: 100%;
            margin-bottom: 20px;
            transition: background-color 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }
        
        .line-login-btn:hover {
            background: #009900;
        }
        
        .divider {
            margin: 20px 0;
            position: relative;
            text-align: center;
            color: #999;
        }
        
        .divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: #ddd;
        }
        
        .divider span {
            background: white;
            padding: 0 15px;
        }
        
        .manual-form {
            text-align: left;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-label {
            display: block;
            color: #333;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .form-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        
        .form-input:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .btn {
            width: 100%;
            padding: 12px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .btn-primary {
            background-color: #667eea;
            color: white;
        }
        
        .btn-primary:hover {
            background-color: #5a6fd8;
        }
        
        .features {
            margin-top: 30px;
            text-align: left;
        }
        
        .feature {
            margin-bottom: 10px;
            color: #666;
            font-size: 14px;
        }
        
        .feature::before {
            content: '‚úì';
            color: #00B900;
            font-weight: bold;
            margin-right: 8px;
        }
    </style>
</head>
<body>
    <div class="auth-container">
        <div class="logo">üìù</div>
        <h1 class="title">Ë®ò‰∫ãÊ©üÂô®‰∫∫</h1>
        <p class="subtitle">Êô∫ËÉΩ‰ªªÂãôÁÆ°ÁêÜ √ó LINEÊï¥Âêà</p>
        
        <button class="line-login-btn" onclick="loginWithLine()">
            <span>‚ö†Ô∏è</span>
            LINE Login Ë®≠ÂÆöË™™Êòé
        </button>
        
        <div class="divider">
            <span>Êàñ</span>
        </div>
        
        <form class="manual-form" id="authForm">
            <div class="form-group">
                <label class="form-label" for="email">ÈõªÂ≠ê‰ø°ÁÆ±</label>
                <input type="email" id="email" name="email" class="form-input" placeholder="Ë´ãËº∏ÂÖ•ÊÇ®ÁöÑEmail" required>
            </div>
            <div class="form-group">
                <label class="form-label" for="name">ÂßìÂêç</label>
                <input type="text" id="name" name="name" class="form-input" placeholder="Ë´ãËº∏ÂÖ•ÊÇ®ÁöÑÂßìÂêç" required>
            </div>
            <button type="submit" class="btn btn-primary">Âª∫Á´ãÂ∏≥Ëôü</button>
        </form>
        
        <div class="features">
            <div class="feature">Êô∫ËÉΩ‰ªªÂãôË≠òÂà•ËàáÁÆ°ÁêÜ</div>
            <div class="feature">LINE Bot Âç≥ÊôÇ‰∫íÂãï</div>
            <div class="feature">Ë∑®Ë£ùÁΩÆÂêåÊ≠•Â≠òÂèñ</div>
            <div class="feature">ÂÄã‰∫∫ÂåñË®≠ÂÆöÈÅ∏È†Ö</div>
        </div>
    </div>
    
    <script>
        function loginWithLine() {
            // Ë∑≥ËΩâÂà∞Ë®≠ÂÆöÊåáÂºïÈ†ÅÈù¢
            window.location.href = '/line-login-setup';
        }
        
        document.getElementById('authForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('email').value;
            const name = document.getElementById('name').value;
            
            try {
                const response = await fetch('/api/auth/register', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ email, name })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Ë®ªÂÜäÊàêÂäüÔºÅË´ãÂà∞LINE‰∏≠ËàáÊ©üÂô®‰∫∫Â∞çË©±ÂÆåÊàêÁ∂ÅÂÆö„ÄÇ');
                    window.location.href = '/auth/success?memberId=' + result.memberId;
                } else {
                    alert('Ë®ªÂÜäÂ§±ÊïóÔºö' + result.message);
                }
            } catch (error) {
                alert('ÁôºÁîüÈåØË™§ÔºåË´ãÂÜçË©¶‰∏ÄÊ¨°');
            }
        });
    </script>
</body>
</html>`;
  
  res.send(html);
});

// LINE Login ÂõûË™øËôïÁêÜ
app.get('/auth/line/callback', async (req, res) => {
  const { code, state } = req.query;
  
  if (!code || !state) {
    return res.redirect('/auth?error=invalid_request');
  }
  
  try {
    // ÈÄôË£°ÊáâË©≤È©óË≠âstateÂèÉÊï∏ÔºåÂØ¶ÈöõÊáâÁî®‰∏≠ÈúÄË¶ÅÂØ¶Áèæ
    
    // ‰ΩøÁî®ÊéàÊ¨äÁ¢ºÁç≤Âèñaccess token
    const tokenResponse = await fetch('https://api.line.me/oauth2/v2.1/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        grant_type: 'authorization_code',
        code: code,
        redirect_uri: req.protocol + '://' + req.get('host') + '/auth/line/callback',
        client_id: process.env.LINE_LOGIN_CHANNEL_ID || '2006706842',
        client_secret: process.env.LINE_LOGIN_CHANNEL_SECRET || 'your_channel_secret'
      })
    });
    
    const tokenData = await tokenResponse.json();
    
    if (!tokenData.access_token) {
      throw new Error('Failed to get access token');
    }
    
    // ‰ΩøÁî®access tokenÁç≤ÂèñÁî®Êà∂Ë≥áÊñô
    const profileResponse = await fetch('https://api.line.me/v2/profile', {
      headers: {
        'Authorization': `Bearer ${tokenData.access_token}`
      }
    });
    
    const profile = await profileResponse.json();
    
    // Ê™¢Êü•ÊòØÂê¶Â∑≤ÊúâÊúÉÂì°Â∏≥Ëôü
    let member = getMemberByLineUserId(profile.userId);
    
    if (!member) {
      // ÂâµÂª∫Êñ∞ÊúÉÂì°
      member = createMember(
        `${profile.userId}@line.user`, // ‰ΩøÁî®LINE ID‰ΩúÁÇ∫Ëá®ÊôÇemail
        profile.displayName,
        profile.userId
      );
    }
    
    // ÂâµÂª∫ÊúÉË©±
    const sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    memberSessions.set(sessionId, {
      memberId: member.id,
      createdAt: new Date().toISOString(),
      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() // 24Â∞èÊôÇÂæåÈÅéÊúü
    });
    
    // Ë®≠ÂÆöÊúÉË©±cookie
    res.cookie('member_session', sessionId, {
      httpOnly: true,
      maxAge: 24 * 60 * 60 * 1000, // 24Â∞èÊôÇ
      secure: process.env.NODE_ENV === 'production'
    });
    
    res.redirect('/auth/success');
    
  } catch (error) {
    console.error('LINE Login error:', error);
    res.redirect('/auth?error=login_failed');
  }
});

// ÁôªÂÖ•ÊàêÂäüÈ†ÅÈù¢
app.get('/auth/success', (req, res) => {
  const html = `
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‚úÖ ÁôªÂÖ•ÊàêÂäü - Ë®ò‰∫ãÊ©üÂô®‰∫∫</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        .success-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            padding: 40px;
            max-width: 500px;
            width: 100%;
            text-align: center;
        }
        
        .success-icon {
            font-size: 64px;
            margin-bottom: 20px;
            animation: bounce 2s infinite;
        }
        
        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateY(0);
            }
            40% {
                transform: translateY(-10px);
            }
            60% {
                transform: translateY(-5px);
            }
        }
        
        .title {
            font-size: 28px;
            color: #00B900;
            margin-bottom: 15px;
            font-weight: 700;
        }
        
        .subtitle {
            color: #666;
            margin-bottom: 30px;
            font-size: 16px;
            line-height: 1.5;
        }
        
        .next-steps {
            background: #f8f9ff;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            text-align: left;
        }
        
        .step {
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .step-number {
            background: #667eea;
            color: white;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
        }
        
        .btn {
            display: inline-block;
            padding: 12px 24px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            text-decoration: none;
            transition: background-color 0.3s;
            margin: 5px;
        }
        
        .btn-primary {
            background-color: #00B900;
            color: white;
        }
        
        .btn-primary:hover {
            background-color: #009900;
        }
        
        .btn-secondary {
            background-color: #667eea;
            color: white;
        }
        
        .btn-secondary:hover {
            background-color: #5a6fd8;
        }
    </style>
</head>
<body>
    <div class="success-container">
        <div class="success-icon">üéâ</div>
        <h1 class="title">ÁôªÂÖ•ÊàêÂäüÔºÅ</h1>
        <p class="subtitle">
            ÊÇ®ÁöÑLINEÂ∏≥ËôüÂ∑≤ÊàêÂäüÁ∂ÅÂÆöÂà∞Ë®ò‰∫ãÊ©üÂô®‰∫∫ÊúÉÂì°Á≥ªÁµ±„ÄÇ<br>
            ÁèæÂú®ÂèØ‰ª•‰∫´ÂèóÂÆåÊï¥ÁöÑÊô∫ËÉΩ‰ªªÂãôÁÆ°ÁêÜÂäüËÉΩÔºÅ
        </p>
        
        <div class="next-steps">
            <h3 style="color: #333; margin-bottom: 15px;">üìã Êé•‰∏ã‰æÜÂèØ‰ª•ÈÄôÊ®£ÂÅöÔºö</h3>
            <div class="step">
                <div class="step-number">1</div>
                <div>Âú®LINE‰∏≠ËàáÊ©üÂô®‰∫∫Â∞çË©±ÔºåÈñãÂßãÊñ∞Â¢ûÊÇ®ÁöÑÁ¨¨‰∏ÄÂÄã‰ªªÂãô</div>
            </div>
            <div class="step">
                <div class="step-number">2</div>
                <div>ÈªûÊìä‰ªªÂãôÊ∏ÖÂñÆ‰∏≠ÁöÑÊåâÈàïÔºåÊé¢Á¥¢Á∂≤È†ÅÁÆ°ÁêÜ‰ªãÈù¢</div>
            </div>
            <div class="step">
                <div class="step-number">3</div>
                <div>Âú®ÂÄã‰∫∫Â∏≥Êà∂‰∏≠Ë™øÊï¥ÊÇ®ÁöÑËÅäÂ§©Ê®°ÂºèÂÅèÂ•Ω</div>
            </div>
        </div>
        
        <div>
            <a href="/profile/\${req.query.memberId || 'demo'}" class="btn btn-primary">Êü•ÁúãÂÄã‰∫∫Ë≥áÊñô</a>
            <button onclick="openLineApp()" class="btn btn-secondary">ÈñãÂïüLINEÂ∞çË©±</button>
        </div>
    </div>
    
    <script>
        function openLineApp() {
            // ÂòóË©¶Â§öÁ®ÆÊñπÂºèÈñãÂïüLINE
            const lineBotId = '@ËÆ∞‰∫ãÊú∫Âô®‰∫∫'; // ÊÇ®ÁöÑBot ID
            
            // ÊñπÊ≥ï1: ‰ΩøÁî®LINE URI scheme (ÈÅ©Áî®ÊñºÊâãÊ©ü)
            const lineUri = 'line://ti/p/' + lineBotId;
            
            // ÊñπÊ≥ï2: ‰ΩøÁî®LINE WebÁâà (ÈÅ©Áî®ÊñºÊ°åÈù¢)
            const lineWebUrl = 'https://line.me/R/ti/p/' + lineBotId;
            
            // ÊñπÊ≥ï3: ‰ΩøÁî®QR CodeÈ†ÅÈù¢
            const qrCodeUrl = '/qr-code';
            
            // Ê™¢Ê∏¨Ë®≠ÂÇôÈ°ûÂûã
            const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            
            if (isMobile) {
                // ÊâãÊ©üË®≠ÂÇôÔºöÂÑ™ÂÖàÂòóË©¶LINE APP
                window.location.href = lineUri;
                
                // ÂÇôÁî®ÊñπÊ°àÔºöÂ¶ÇÊûúAPPÊ≤íÈñãÂïüÔºå3ÁßíÂæåÊèê‰æõWebÁâàÈÅ∏È†Ö
                setTimeout(() => {
                    if (confirm('ÁÑ°Ê≥ïÈñãÂïüLINEÊáâÁî®Á®ãÂºèÔºü\\nÈªûÊìä„ÄåÁ¢∫ÂÆö„Äç‰ΩøÁî®Á∂≤È†ÅÁâàLINEÔºåÊàñ„ÄåÂèñÊ∂à„ÄçÊü•ÁúãQR Code„ÄÇ')) {
                        window.open(lineWebUrl, '_blank');
                    } else {
                        window.open(qrCodeUrl, '_blank');
                    }
                }, 3000);
            } else {
                // Ê°åÈù¢Ë®≠ÂÇôÔºöÁõ¥Êé•È°ØÁ§∫ÈÅ∏È†Ö
                const choice = prompt('Ë´ãÈÅ∏ÊìáÂä†ÂÖ•ÊñπÂºèÔºö\\n1. Ëº∏ÂÖ•„Äå1„ÄçÈñãÂïüÁ∂≤È†ÅÁâàLINE\\n2. Ëº∏ÂÖ•„Äå2„ÄçÊü•ÁúãQR Code\\n3. ÊâãÂãïÊêúÂ∞ãBot IDÔºö' + lineBotId);
                
                if (choice === '1') {
                    window.open(lineWebUrl, '_blank');
                } else if (choice === '2') {
                    window.open(qrCodeUrl, '_blank');
                } else {
                    alert('Ë´ãÂú®LINE‰∏≠ÊêúÂ∞ãBot IDÔºö' + lineBotId);
                }
            }
        }
        
        // Ëá™ÂãïÂÄíÊï∏Ë∑≥ËΩâÊèêÁ§∫
        let countdown = 30;
        const timer = setInterval(() => {
            countdown--;
            if (countdown <= 0) {
                clearInterval(timer);
                window.location.href = '/';
            }
        }, 1000);
    </script>
</body>
</html>`;
  
  res.send(html);
});

// LINE Login Ë®≠ÂÆöÊåáÂºïÈ†ÅÈù¢
app.get('/line-login-setup', (req, res) => {
  const callbackUrl = req.protocol + '://' + req.get('host') + '/auth/line/callback';
  
  const html = `
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üîß LINE Login Ë®≠ÂÆöÊåáÂºï</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            padding: 40px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .header h1 {
            color: #00B900;
            font-size: 32px;
            margin-bottom: 10px;
        }
        
        .header p {
            color: #666;
            font-size: 16px;
        }
        
        .step {
            background: #f8f9ff;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            border-left: 5px solid #00B900;
        }
        
        .step-title {
            color: #00B900;
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .step-content {
            color: #333;
            line-height: 1.6;
        }
        
        .code-block {
            background: #2d3748;
            color: #e2e8f0;
            padding: 15px;
            border-radius: 8px;
            font-family: 'Monaco', 'Courier New', monospace;
            margin: 10px 0;
            overflow-x: auto;
        }
        
        .highlight {
            background: #fff3cd;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #ffc107;
            margin: 15px 0;
        }
        
        .btn {
            display: inline-block;
            padding: 12px 24px;
            background: #00B900;
            color: white;
            text-decoration: none;
            border-radius: 8px;
            font-weight: bold;
            margin: 10px 5px;
            transition: background 0.3s;
        }
        
        .btn:hover {
            background: #009900;
        }
        
        .btn-secondary {
            background: #667eea;
        }
        
        .btn-secondary:hover {
            background: #5a6fd8;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîß LINE Login Ë®≠ÂÆöÊåáÂºï</h1>
            <p>Ë®≠ÂÆö LINE Login ‰ª•ÂïüÁî®‰∏ÄÈçµÁôªÂÖ•ÂäüËÉΩ</p>
        </div>
        
        <div class="step">
            <div class="step-title">
                <span>1Ô∏è‚É£</span>
                ÂâçÂæÄ LINE Developer Console
            </div>
            <div class="step-content">
                <p>1. Ë®™Âïè <a href="https://developers.line.biz/console/" target="_blank" style="color: #00B900; font-weight: bold;">LINE Developer Console</a></p>
                <p>2. ÁôªÂÖ•ÊÇ®ÁöÑ LINE ÈñãÁôºËÄÖÂ∏≥Ëôü</p>
                <p>3. ÈÅ∏ÊìáÊÇ®ÁöÑ Provider ÊàñÂª∫Á´ãÊñ∞ÁöÑ Provider</p>
            </div>
        </div>
        
        <div class="step">
            <div class="step-title">
                <span>2Ô∏è‚É£</span>
                Âª∫Á´ãÊàñÈÅ∏Êìá LINE Login Channel
            </div>
            <div class="step-content">
                <p>1. Âú® Channel ÂàóË°®‰∏≠ÊâæÂà∞ÊÇ®ÁöÑ LINE Login Channel</p>
                <p>2. Â¶ÇÊûúÊ≤íÊúâÔºåË´ãÂª∫Á´ãÊñ∞ÁöÑ LINE Login Channel</p>
                <p>3. Ë®ò‰∏ã Channel ID Âíå Channel Secret</p>
            </div>
        </div>
        
        <div class="step">
            <div class="step-title">
                <span>3Ô∏è‚É£</span>
                Ë®≠ÂÆö Callback URL
            </div>
            <div class="step-content">
                <p>1. ÈÄ≤ÂÖ•ÊÇ®ÁöÑ LINE Login Channel Ë®≠ÂÆö</p>
                <p>2. ÊâæÂà∞„ÄåApp settings„Äç‚Üí„ÄåLINE Login settings„Äç</p>
                <p>3. Âú®„ÄåCallback URL„ÄçÊ¨Ñ‰Ωç‰∏≠Âä†ÂÖ•‰ª•‰∏ãÁ∂≤ÂùÄÔºö</p>
                <div class="code-block">${callbackUrl}</div>
                <div class="highlight">
                    <strong>üìå ÈáçË¶ÅÔºö</strong> Ë´ãÂ∞á‰∏äÊñπÁ∂≤ÂùÄÂÆåÊï¥Ë§áË£ΩÂà∞ LINE Developer Console ÁöÑ Callback URL Ë®≠ÂÆö‰∏≠
                </div>
            </div>
        </div>
        
        <div class="step">
            <div class="step-title">
                <span>4Ô∏è‚É£</span>
                Ë®≠ÂÆöÁí∞Â¢ÉËÆäÊï∏
            </div>
            <div class="step-content">
                <p>Âú®ÊÇ®ÁöÑ <code>.env</code> Ê™îÊ°à‰∏≠Âä†ÂÖ•‰ª•‰∏ãË®≠ÂÆöÔºö</p>
                <div class="code-block">LINE_LOGIN_CHANNEL_ID=ÊÇ®ÁöÑ_Channel_ID
LINE_LOGIN_CHANNEL_SECRET=ÊÇ®ÁöÑ_Channel_Secret</div>
                <p>ÊõøÊèõÊàêÊÇ®Âú®Ê≠•È©ü2‰∏≠Ë®ò‰∏ãÁöÑÂØ¶ÈöõÂÄº</p>
            </div>
        </div>
        
        <div class="step">
            <div class="step-title">
                <span>5Ô∏è‚É£</span>
                Ê∏¨Ë©¶Ë®≠ÂÆö
            </div>
            <div class="step-content">
                <p>1. ÈáçÊñ∞ÂïüÂãïÊÇ®ÁöÑÊáâÁî®Á®ãÂºè</p>
                <p>2. ËøîÂõûË®ªÂÜäÈ†ÅÈù¢Ê∏¨Ë©¶ LINE Login ÂäüËÉΩ</p>
                <p>3. Á¢∫Ë™çËÉΩÂ§†ÊàêÂäüË∑≥ËΩâÂà∞ LINE ÊéàÊ¨äÈ†ÅÈù¢</p>
            </div>
        </div>
        
        <div style="text-align: center; margin-top: 30px;">
            <a href="/auth" class="btn">ËøîÂõûË®ªÂÜäÈ†ÅÈù¢</a>
            <a href="https://developers.line.biz/console/" target="_blank" class="btn btn-secondary">ÈñãÂïü Developer Console</a>
        </div>
    </div>
</body>
</html>`;
  
  res.send(html);
});

// API: ÊâãÂãïË®ªÂÜäÊúÉÂì°
app.post('/api/auth/register', express.json(), (req, res) => {
  const { email, name } = req.body;
  
  if (!email || !name) {
    return res.json({ success: false, message: 'Ë´ãÂ°´ÂØ´ÂÆåÊï¥Ë≥áÊñô' });
  }
  
  // Ê™¢Êü•emailÊòØÂê¶Â∑≤Â≠òÂú®
  const existingMember = Array.from(members.values()).find(m => m.email === email);
  if (existingMember) {
    return res.json({ success: false, message: 'Ê≠§EmailÂ∑≤Ë¢´Ë®ªÂÜä' });
  }
  
  try {
    const member = createMember(email, name);
    res.json({ 
      success: true, 
      memberId: member.id,
      message: 'Ë®ªÂÜäÊàêÂäüÔºÅË´ãÂà∞LINE‰∏≠ËàáÊ©üÂô®‰∫∫Â∞çË©±ÂÆåÊàêÁ∂ÅÂÆö„ÄÇ'
    });
  } catch (error) {
    console.error('Registration error:', error);
    res.json({ success: false, message: 'Ë®ªÂÜäÂ§±ÊïóÔºåË´ãÂÜçË©¶‰∏ÄÊ¨°' });
  }
});

// API: Á∂ÅÂÆöLINEÂ∏≥Ëôü
app.post('/api/auth/bind-line', express.json(), (req, res) => {
  const { memberId, lineUserId } = req.body;
  
  if (!memberId || !lineUserId) {
    return res.json({ success: false, message: 'ÂèÉÊï∏‰∏çÂÆåÊï¥' });
  }
  
  // Ê™¢Êü•LINEÂ∏≥ËôüÊòØÂê¶Â∑≤Ë¢´ÂÖ∂‰ªñÊúÉÂì°Á∂ÅÂÆö
  const existingBinding = lineBindings.get(lineUserId);
  if (existingBinding && existingBinding !== memberId) {
    return res.json({ success: false, message: 'Ê≠§LINEÂ∏≥ËôüÂ∑≤Ë¢´ÂÖ∂‰ªñÊúÉÂì°Á∂ÅÂÆö' });
  }
  
  const success = bindLineToMember(memberId, lineUserId);
  
  if (success) {
    res.json({ success: true, message: 'LINEÂ∏≥ËôüÁ∂ÅÂÆöÊàêÂäü' });
  } else {
    res.json({ success: false, message: 'Á∂ÅÂÆöÂ§±ÊïóÔºåÊúÉÂì°‰∏çÂ≠òÂú®' });
  }
});

// Áç≤ÂèñÁï∂ÂâçÊúçÂãôÁöÑÂü∫Á§éURL
function getBaseUrl(req) {
  if (req) {
    return `${req.protocol}://${req.get('host')}`;
  }
  // ÂæûÁí∞Â¢ÉËÆäÊï∏ÊàñÈ†êË®≠ÂÄºÁç≤Âèñ
  return process.env.BASE_URL || 'http://localhost:3000';
}

// ‰ªªÂãôË®òÈåÑÁ¢∫Ë™ç Flex Message  
function createTaskRecordFlexMessage(taskText, userId, taskId, baseUrl) {
  return {
    type: 'flex',
    altText: `‰ªªÂãôÂ∑≤Ë®òÈåÑÔºö${taskText}`,
    contents: {
      type: 'bubble',
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üìù ‰ªªÂãôÂ∑≤Ë®òÈåÑ',
            weight: 'bold',
            size: 'xl',
            color: '#2196F3',
            align: 'center',
            margin: 'md'
          },
          {
            type: 'separator',
            margin: 'md'
          },
          {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'text',
                text: 'ÊÇ®ÁöÑ‰ªªÂãôÔºö',
                size: 'sm',
                color: '#666666',
                margin: 'lg'
              },
              {
                type: 'text',
                text: taskText,
                weight: 'bold',
                size: 'lg',
                color: '#333333',
                margin: 'sm',
                wrap: true
              }
            ]
          },
          {
            type: 'separator',
            margin: 'lg'
          }
        ],
        paddingAll: 'lg'
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        spacing: 'sm',
        contents: [
          {
            type: 'button',
            style: 'primary',
            height: 'sm',
            action: {
              type: 'uri',
              label: 'Á∑®ËºØ',
              uri: `${baseUrl}/liff/tasks`
            }
          },
          {
            type: 'separator',
            margin: 'md'
          },
          {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'text',
                text: '‚úÖ ‰ªªÂãôÂ∑≤Âä†ÂÖ•‰ªäÊó•ÂæÖËæ¶Ê∏ÖÂñÆ',
                size: 'xs',
                color: '#888888',
                align: 'center'
              }
            ],
            margin: 'sm'
          }
        ],
        paddingAll: 'lg'
      }
    }
  };
}

// Á¥ØÁ©ç‰ªªÂãô Flex Message - È°ØÁ§∫‰ªäÂ§©ÊâÄÊúâ‰ªªÂãô
function createCumulativeTasksFlexMessage(todayTasks, userId, baseUrl) {
  const taskCount = todayTasks.length;
  
  // ÂâµÂª∫‰ªªÂãôÂàóË°®ÂÖßÂÆπ
  const taskContents = todayTasks.map((task, index) => ({
    type: 'box',
    layout: 'horizontal',
    contents: [
      {
        type: 'text',
        text: `${index + 1}.`,
        size: 'sm',
        color: '#666666',
        flex: 0,
        margin: 'sm'
      },
      {
        type: 'text',
        text: task.text,
        size: 'md',
        color: '#333333',
        margin: 'sm',
        flex: 5,
        wrap: true,
        weight: 'bold'
      }
    ],
    margin: 'md',
    paddingAll: 'sm',
    backgroundColor: '#f8f9fa',
    cornerRadius: '8px'
  }));

  return {
    type: 'flex',
    altText: `‰ªäÊó•‰ªªÂãôÊ∏ÖÂñÆ (${taskCount}È†Ö)`,
    contents: {
      type: 'bubble',
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üìã ‰ªäÊó•‰ªªÂãôÊ∏ÖÂñÆ',
            weight: 'bold',
            size: 'xl',
            color: '#2196F3',
            align: 'center',
            margin: 'md'
          },
          {
            type: 'separator',
            margin: 'md'
          },
          {
            type: 'text',
            text: `ÂÖ± ${taskCount} È†Ö‰ªªÂãô`,
            size: 'sm',
            color: '#666666',
            margin: 'lg',
            align: 'center'
          },
          {
            type: 'box',
            layout: 'vertical',
            contents: taskContents,
            margin: 'lg'
          },
          {
            type: 'separator',
            margin: 'lg'
          },
          {
            type: 'text',
            text: '‚ú® ÁπºÁ∫åÂä†Ê≤πÔºÅ',
            size: 'sm',
            color: '#2196F3',
            align: 'center',
            margin: 'md'
          }
        ],
        paddingAll: 'lg'
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'button',
            action: {
              type: 'uri',
              label: 'ÁÆ°ÁêÜÊâÄÊúâ‰ªªÂãô',
              uri: `${baseUrl}/liff/tasks?userId=${userId}`
            },
            style: 'primary',
            color: '#2196F3'
          },
          {
            type: 'text',
            text: 'ÈªûÊìäÈÄ≤ÂÖ• LIFF ÊáâÁî®ÁÆ°ÁêÜ‰ªªÂãô',
            size: 'xs',
            color: '#888888',
            align: 'center',
            margin: 'sm'
          }
        ],
        paddingAll: 'lg'
      }
    }
  };
}

// ‰ªªÂãôÊ∏ÖÂñÆ Flex Message
function createTaskListFlexMessage(taskCount, tasks, userId, baseUrl) {
  return {
    type: 'flex',
    altText: `${taskCount}ÂÄãÂæÖËæ¶‰∫ãÈ†Ö`,
    contents: {
      type: 'bubble',
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: `üìã ${taskCount}ÂÄãÂæÖËæ¶‰∫ãÈ†Ö`,
            weight: 'bold',
            size: 'xl',
            color: '#2196F3',
            align: 'center',
            margin: 'md'
          },
          {
            type: 'separator',
            margin: 'md'
          },
          {
            type: 'text',
            text: `‰ªäÊó•ÂÖ±Êúâ ${taskCount} È†Ö‰ªªÂãô`,
            size: 'sm',
            color: '#666666',
            margin: 'lg',
            align: 'center'
          },
          {
            type: 'box',
            layout: 'vertical',
            contents: tasks.slice(0, 3).map((task, index) => ({
              type: 'box',
              layout: 'horizontal',
              contents: [
                {
                  type: 'text',
                  text: `${index + 1}.`,
                  size: 'sm',
                  color: '#888888',
                  flex: 0
                },
                {
                  type: 'text',
                  text: task.text,
                  size: 'sm',
                  color: '#333333',
                  margin: 'xs',
                  wrap: true,
                  flex: 1
                }
              ],
              margin: 'sm'
            })).concat(taskCount > 3 ? [{
              type: 'text',
              text: `...ÈÇÑÊúâ ${taskCount - 3} È†Ö‰ªªÂãô`,
              size: 'xs',
              color: '#aaaaaa',
              align: 'center',
              margin: 'sm'
            }] : []),
            margin: 'md'
          },
          {
            type: 'separator',
            margin: 'lg'
          }
        ],
        paddingAll: 'lg'
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        spacing: 'sm',
        contents: [
          {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'text',
                text: 'üì± ÈªûÊìäÊü•ÁúãË©≥Á¥∞‰ªªÂãôË≥áË®ä',
                size: 'xs',
                color: '#888888',
                align: 'center'
              }
            ],
            margin: 'sm'
          }
        ],
        paddingAll: 'lg'
      }
    }
  };
}

async function getChatGPTResponse(userMessage) {
  try {
    if (!process.env.OPENAI_API_KEY) {
      return 'Êä±Ê≠âÔºåAIÂäüËÉΩÂ∞öÊú™Ë®≠ÂÆö„ÄÇË´ãËÅØÁπ´ÁÆ°ÁêÜÂì°Ë®≠ÂÆöOpenAI APIÈáëÈë∞„ÄÇ';
    }

    // Ê∑ªÂä†Ë∂ÖÊôÇÊéßÂà∂ÔºåÈÅøÂÖçwebhookË∂ÖÊôÇ
    const timeoutPromise = new Promise((_, reject) =>
      setTimeout(() => reject(new Error('OpenAI_TIMEOUT')), 20000)
    );

    const completion = await Promise.race([
      openai.chat.completions.create({
        model: process.env.OPENAI_MODEL || 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: '‰Ω†ÊòØ‰∏ÄÂÄãÂèãÂñÑÁöÑLINEËÅäÂ§©Ê©üÂô®‰∫∫Âä©Êâã„ÄÇË´ãÁî®ÁπÅÈ´î‰∏≠ÊñáÂõûÁ≠îÔºå‰øùÊåÅÂõûË¶ÜÁ∞°ÊΩîÊúâÁî®ÔºåÈÄöÂ∏∏Âú®100Â≠ó‰ª•ÂÖß„ÄÇ'
          },
          {
            role: 'user',
            content: userMessage
          }
        ],
        max_tokens: 300,
        temperature: 0.7
      }),
      timeoutPromise
    ]);

    return completion.choices[0].message.content.trim();
  } catch (error) {
    console.error('OpenAI API Error:', error);
    
    if (error.message === 'OpenAI_TIMEOUT') {
      return '‚è±Ô∏è AIÂõûË¶ÜËôïÁêÜ‰∏≠ÔºåË´ãÁ®çÂæåÂÜçË©¶ÊàñÁõ¥Êé•Ëº∏ÂÖ•‰ªªÂãô„ÄÇ';
    } else if (error.code === 'insufficient_quota') {
      return 'Êä±Ê≠âÔºåAIÊúçÂãôÈÖçÈ°çÂ∑≤Áî®ÂÆåÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ';
    } else if (error.code === 'invalid_api_key') {
      return 'Êä±Ê≠âÔºåAIÊúçÂãôË®≠ÂÆöÊúâË™§ÔºåË´ãËÅØÁπ´ÁÆ°ÁêÜÂì°„ÄÇ';
    } else {
      return 'ü§ñ AIÊö´ÊôÇÁÑ°Ê≥ïÂõûÊáâÔºåÊÇ®ÂèØ‰ª•Áõ¥Êé•Ëº∏ÂÖ•‰ªªÂãôÂ¶ÇÔºö„Äå17:00Á¥ÑÊúÉ„Äç';
    }
  }
}

app.post('/webhook', line.middleware(config), (req, res) => {
  const baseUrl = getBaseUrl(req);
  
  // Ê∑ªÂä†Êï¥È´îË∂ÖÊôÇ‰øùË≠∑ÔºåÁ¢∫‰øùÂú®LINE 30ÁßíÈôêÂà∂ÂÖßÂõûÊáâ
  const timeout = setTimeout(() => {
    console.warn('WebhookËôïÁêÜË∂ÖÊôÇÔºåÂõûÂÇ≥200ÈÅøÂÖçÈáçË©¶');
    if (!res.headersSent) {
      res.status(200).json({ status: 'timeout' });
    }
  }, 28000);

  Promise
    .all(req.body.events.map(event => handleEvent(event, baseUrl)))
    .then(result => {
      clearTimeout(timeout);
      if (!res.headersSent) {
        res.json(result);
      }
    })
    .catch(err => {
      clearTimeout(timeout);
      console.error('Error handling events:', err);
      if (!res.headersSent) {
        res.status(200).json({ error: 'handled' });
      }
    });
});

async function handleEvent(event, baseUrl) {
  console.log('Received event:', event);
  
  const startTime = Date.now();
  let intentDetected = null;
  let responseType = null;
  let isSuccessful = true;
  let errorMessage = null;

  if (event.type !== 'message' || event.message.type !== 'text') {
    return Promise.resolve(null);
  }
  
  const userMessage = event.message.text;
  const userId = event.source.userId || 'default-user';
  let replyMessage = '';

  try {
    // Ë®òÈåÑÊî∂Âà∞ÁöÑË®äÊÅØÂà∞Ë≥áÊñôÂ∫´
    if (database.isInitialized) {
      await database.logChatMessage({
        lineUserId: userId,
        memberId: null, // Â∞áÂú®ÂæåÈù¢ÂèñÂæó
        messageType: event.message.type,
        direction: 'incoming',
        content: userMessage,
        rawData: event,
        intentDetected: null, // Â∞áÂú®ËôïÁêÜÂæåÊõ¥Êñ∞
        responseType: null,
        processingTime: null,
        isSuccessful: true,
        errorMessage: null,
        sessionId: event.webhookEventId
      });

      // Êõ¥Êñ∞Áî®Êà∂ÊúÄÂæåÊ¥ªÂãïÊôÇÈñìÂíåÁµ±Ë®à
      await database.updateLastActivity(userId);
      await database.updateActivityStats(userId, 'message');
    }
    if (userMessage.toLowerCase() === 'hello') {
      intentDetected = 'greeting';
      responseType = 'welcome';
      replyMessage = 'Hello! ‰Ω†Â•ΩÔºÅÊàëÊòØÊÇ®ÁöÑÂ∞àÂ±¨Ë®ò‰∫ãÊ©üÂô®‰∫∫ÔºåÂèØ‰ª•Âπ´ÊÇ®Ë®òÈåÑÂíåÁÆ°ÁêÜ‰ªäÊó•ÂæÖËæ¶‰∫ãÈ†ÖÔºÅüìù\n\nË´ãÁõ¥Êé•Ëº∏ÂÖ•ÊÇ®ÁöÑ‰ªªÂãôÔºå‰æãÂ¶ÇÔºö„Äå17:00Â∞èÁæéÁ¥ÑÊúÉ„Äç';
      
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: replyMessage
      });
      
    } else if (userMessage.includes('‰ªäÂ§©ÊàëÁöÑ‰ªªÂãôÊúâÂì™‰∫õ') || userMessage.includes('‰ªäÊó•‰ªªÂãô') || userMessage.includes('ÂæÖËæ¶‰∫ãÈ†Ö') || userMessage === '‰ªªÂãôÊ∏ÖÂñÆ') {
      intentDetected = 'task_query';
      responseType = 'task_list';
      console.log(`Getting tasks for user: ${userId}`);
      
      const todayTasks = getTodayTasks(userId);
      const taskCount = todayTasks.length;
      
      if (taskCount === 0) {
        replyMessage = 'üéâ ‰ªäÂ§©ÈÇÑÊ≤íÊúâ‰ªª‰ΩïÂæÖËæ¶‰∫ãÈ†ÖÔºÅ\nÊÇ®ÂèØ‰ª•Áõ¥Êé•Ëº∏ÂÖ•‰ªªÂãôÔºå‰æãÂ¶ÇÔºö„Äå17:00Â∞èÁæéÁ¥ÑÊúÉ„Äç‰æÜÊñ∞Â¢û‰ªªÂãô„ÄÇ';
        
        return client.replyMessage(event.replyToken, {
          type: 'text',
          text: replyMessage
        });
      }
      
      const flexMessage = createTaskListFlexMessage(taskCount, todayTasks, userId, baseUrl);
      flexMessage.quickReply = {
        items: [
          {
            type: 'action',
            action: {
              type: 'uri',
              label: '‰ªäÂ§©',
              uri: `${baseUrl}/liff/tasks`
            }
          },
          {
            type: 'action',
            action: {
              type: 'uri',
              label: 'ÂÖ®ÈÉ®',
              uri: `${baseUrl}/liff/tasks`
            }
          },
          {
            type: 'action',
            action: {
              type: 'uri',
              label: 'ÂÄã‰∫∫',
              uri: `${baseUrl}/profile/${userId}`
            }
          }
        ]
      };
      
      return client.replyMessage(event.replyToken, flexMessage);
      
    } else if (userMessage.toLowerCase().includes('/help') || userMessage === 'Âπ´Âä©') {
      replyMessage = `üìù Ë®ò‰∫ãÊ©üÂô®‰∫∫ÂäüËÉΩË™™ÊòéÔºö

üî∏ **Êñ∞Â¢û‰ªªÂãô**ÔºöÁõ¥Êé•Ëº∏ÂÖ•ÊÇ®ÁöÑ‰ªªÂãô
   ‰æãÂ¶ÇÔºö„Äå17:00Â∞èÁæéÁ¥ÑÊúÉ„Äç

üî∏ **Êü•Áúã‰ªªÂãô**ÔºöË©¢Âïè‰ªäÊó•‰ªªÂãô
   ‰æãÂ¶ÇÔºö„Äå‰ªäÂ§©ÊàëÁöÑ‰ªªÂãôÊúâÂì™‰∫õÔºü„Äç

üî∏ **AIÂïèÁ≠î**ÔºöÂÖ∂‰ªñÂïèÈ°åÊúÉÁî±ChatGPTÂõûÁ≠î

üî∏ **ÁâπÊÆäÊåá‰ª§**Ôºö
   - „Äåhello„Äç: Ê≠°ËøéË®äÊÅØ
   - „ÄåÂπ´Âä©„Äç: Êü•ÁúãÊ≠§Ë™™Êòé

ÈñãÂßãËº∏ÂÖ•ÊÇ®ÁöÑÁ¨¨‰∏ÄÂÄã‰ªªÂãôÂêßÔºÅ‚ú®`;

      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: replyMessage
      });
      
    } else {
      // Ê™¢Êü•ÊòØÂê¶ÁÇ∫‰ªªÂãôÊ†ºÂºèÔºàÂåÖÂê´ÊôÇÈñìÊàñÂÖ∑È´î‰∫ãÈ†ÖÔºâ
      const isTask = userMessage.match(/\d{1,2}[:Ôºö]\d{2}/) || 
                    userMessage.includes('Á¥ÑÊúÉ') || 
                    userMessage.includes('ÊúÉË≠∞') || 
                    userMessage.includes('Ë≤∑') || 
                    userMessage.includes('Âéª') || 
                    userMessage.includes('ÂÅö') || 
                    userMessage.includes('ÂÆåÊàê') ||
                    userMessage.length > 3; // Á∞°ÂñÆÂà§Êñ∑ÔºöÈï∑Â∫¶Â§ßÊñº3ÂèØËÉΩÊòØ‰ªªÂãô
      
      if (isTask && !userMessage.includes('Ôºü') && !userMessage.includes('?') && !userMessage.includes('‰ªÄÈ∫º') && !userMessage.includes('Â¶Ç‰Ωï')) {
        intentDetected = 'task_create';
        responseType = 'task_created';
        console.log(`Adding task for user ${userId}: ${userMessage}`);
        
        const task = addTask(userId, userMessage);
        
        // ÂêåÊôÇË®òÈåÑ‰ªªÂãôÂà∞Ë≥áÊñôÂ∫´
        if (database.isInitialized) {
          try {
            const member = await database.getMember(userId);
            await database.createTask({
              taskId: task.id.toString(),
              lineUserId: userId,
              memberId: member ? member.member_id : null,
              title: userMessage,
              description: '',
              status: 'pending',
              priority: 1,
              dueDate: null,
              tags: '',
              source: 'line',
              metadata: { original_message: userMessage }
            });
          } catch (dbError) {
            console.error('Error saving task to database:', dbError);
          }
        }
        
        // Áç≤Âèñ‰ªäÂ§©ÊâÄÊúâ‰ªªÂãôÔºàÂåÖÂê´ÂâõÊñ∞Â¢ûÁöÑÔºâ
        const todayTasks = getTodayTasks(userId);
        
        // ‰ΩøÁî®Á¥ØÁ©ç‰ªªÂãôÈ°ØÁ§∫ÂáΩÊï∏
        const flexMessage = createCumulativeTasksFlexMessage(todayTasks, userId, baseUrl);
        flexMessage.quickReply = {
          items: [
            {
              type: 'action',
              action: {
                type: 'uri',
                label: 'ÁÆ°ÁêÜ‰ªªÂãô',
                uri: `${baseUrl}/liff/tasks`
              }
            },
            {
              type: 'action',
              action: {
                type: 'uri',
                label: 'Êü•ÁúãÂÖ®ÈÉ®',
                uri: `${baseUrl}/liff/tasks`
              }
            },
            {
              type: 'action',
              action: {
                type: 'uri',
                label: 'ÂÄã‰∫∫Ë®≠ÂÆö',
                uri: `${baseUrl}/profile/${userId}`
              }
            }
          ]
        };
        
        return client.replyMessage(event.replyToken, flexMessage);
        
      } else {
        // ÂÖ∂‰ªñË®äÊÅØ‰ΩøÁî®ChatGPTÂõûË¶Ü
        intentDetected = 'general_query';
        responseType = 'ai_response';
        console.log(`Sending message to ChatGPT: ${userMessage}`);
        replyMessage = await getChatGPTResponse(userMessage);
        console.log(`ChatGPT response: ${replyMessage}`);
        
        return client.replyMessage(event.replyToken, {
          type: 'text',
          text: replyMessage
        });
      }
    }
  } catch (error) {
    console.error('Error in handleEvent:', error);
    isSuccessful = false;
    errorMessage = error.message;
    replyMessage = 'Êä±Ê≠âÔºåËôïÁêÜÊÇ®ÁöÑË®äÊÅØÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ';
    
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: replyMessage
    });
  } finally {
    // Ë®òÈåÑËôïÁêÜÂÆåÊàêÁöÑË≥áË®äÂà∞Ë≥áÊñôÂ∫´
    if (database.isInitialized) {
      const processingTime = Date.now() - startTime;
      
      try {
        // Ë®òÈåÑÂõûÊáâË®äÊÅØ
        if (replyMessage) {
          await database.logChatMessage({
            lineUserId: userId,
            memberId: null,
            messageType: 'text',
            direction: 'outgoing',
            content: replyMessage,
            rawData: null,
            intentDetected: intentDetected,
            responseType: responseType,
            processingTime: processingTime,
            isSuccessful: isSuccessful,
            errorMessage: errorMessage,
            sessionId: event.webhookEventId
          });
        }
        
        // Ë®òÈåÑAIÊü•Ë©¢Áµ±Ë®à
        if (responseType === 'ai_response') {
          await database.updateActivityStats(userId, 'ai_query');
        }
        
        // Ë®òÈåÑ‰ªªÂãôÂª∫Á´ãÁµ±Ë®à
        if (responseType === 'task_created') {
          await database.updateActivityStats(userId, 'task_create');
        }
        
      } catch (dbError) {
        console.error('Database logging error:', dbError);
      }
    }
  }
}

// QR Code È†ÅÈù¢Ë∑ØÁî±
app.get('/qr-code', (req, res) => {
  const html = `
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üì± ÊéÉÊèè QR Code Âä†ÂÖ• LINE Bot</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #00B900 0%, #00D000 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.2);
            padding: 40px;
            text-align: center;
            max-width: 400px;
            width: 100%;
        }
        
        .header {
            margin-bottom: 30px;
        }
        
        .header h1 {
            color: #00B900;
            font-size: 28px;
            margin-bottom: 10px;
        }
        
        .header p {
            color: #666;
            font-size: 16px;
        }
        
        .qr-container {
            margin: 30px 0;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 15px;
            border: 2px dashed #00B900;
        }
        
        .qr-code {
            width: 200px;
            height: 200px;
            margin: 0 auto;
        }
        
        .instructions {
            background: #e3f2fd;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
        }
        
        .step {
            display: flex;
            align-items: center;
            margin: 10px 0;
            text-align: left;
        }
        
        .step-number {
            background: #00B900;
            color: white;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 10px;
            font-size: 12px;
        }
        
        .manual-info {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 10px;
            padding: 15px;
            margin-top: 20px;
        }
        
        .bot-id {
            background: #f1f3f4;
            border-radius: 5px;
            padding: 8px;
            font-family: monospace;
            font-weight: bold;
            color: #00B900;
            margin: 5px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üì± Âä†ÂÖ• LINE Bot</h1>
            <p>ÊéÉÊèè QR Code ÊàñÊâãÂãïÊêúÂ∞ã</p>
        </div>
        
        <div class="qr-container">
            <div class="qr-code">
                <!-- QR Code ÊúÉÁî± Google Charts API ÁîüÊàê -->
                <img src="https://chart.googleapis.com/chart?chs=200x200&cht=qr&chl=https://line.me/R/ti/p/@ËÆ∞‰∫ãÊú∫Âô®‰∫∫" 
                     alt="LINE Bot QR Code" 
                     style="width: 100%; height: 100%; border-radius: 10px;">
            </div>
        </div>
        
        <div class="instructions">
            <div class="step">
                <div class="step-number">1</div>
                <div>ÈñãÂïü LINE ÊáâÁî®Á®ãÂºè</div>
            </div>
            <div class="step">
                <div class="step-number">2</div>
                <div>ÈªûÊìäÂè≥‰∏äËßíÁöÑ„Äå+„ÄçÊ∑ªÂä†Â•ΩÂèã</div>
            </div>
            <div class="step">
                <div class="step-number">3</div>
                <div>ÈÅ∏Êìá„ÄåQR Code„ÄçÊéÉÊèè‰∏äÊñπÂúñÁâá</div>
            </div>
            <div class="step">
                <div class="step-number">4</div>
                <div>ÈªûÊìä„ÄåÂä†ÂÖ•Â•ΩÂèã„ÄçÈñãÂßã‰ΩøÁî®</div>
            </div>
        </div>
        
        <div class="manual-info">
            <strong>üìù ÊâãÂãïÊêúÂ∞ãÊñπÂºèÔºö</strong><br>
            Âú® LINE ‰∏≠ÊêúÂ∞ã Bot IDÔºö
            <div class="bot-id">@ËÆ∞‰∫ãÊú∫Âô®‰∫∫</div>
            <small>‚Äª Ë´ãÁ¢∫‰øùÂåÖÂê´ @ Á¨¶Ëôü</small>
        </div>
        
        <button onclick="window.close()" 
                style="margin-top: 20px; padding: 12px 30px; background: #00B900; color: white; border: none; border-radius: 25px; font-size: 16px; cursor: pointer;">
            ÂÆåÊàê
        </button>
    </div>
</body>
</html>
  `;
  
  res.send(html);
});

// ================================
// Ë≥áÊñôÂ∫´ÁÆ°ÁêÜ‰ªãÈù¢
// ================================

// Ë≥áÊñôÂ∫´ÁÆ°ÁêÜ‰∏ªÈ†Å
app.get('/admin/dashboard', async (req, res) => {
  try {
    const stats = await database.getDatabaseStats();
    const systemLogs = await database.getSystemLogs(null, null, 20);
    
    const html = `
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìä Ë≥áÊñôÂ∫´ÁÆ°ÁêÜÂæåÂè∞</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .admin-container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 32px;
            margin-bottom: 10px;
        }
        
        .content {
            padding: 30px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: #f8f9ff;
            border-radius: 12px;
            padding: 25px;
            text-align: center;
            border-left: 5px solid #667eea;
        }
        
        .stat-number {
            font-size: 32px;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 10px;
        }
        
        .stat-label {
            color: #666;
            font-size: 16px;
        }
        
        .section {
            background: #f8f9ff;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
        }
        
        .section-title {
            color: #333;
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .nav-buttons {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }
        
        .nav-btn {
            background: #667eea;
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            text-decoration: none;
            font-weight: bold;
            transition: all 0.3s;
            cursor: pointer;
        }
        
        .nav-btn:hover {
            background: #5a6fd8;
            transform: translateY(-2px);
        }
        
        .log-item {
            background: white;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            border-left: 4px solid;
            font-size: 14px;
        }
        
        .log-info { border-left-color: #00B900; }
        .log-warning { border-left-color: #FF9800; }
        .log-error { border-left-color: #F44336; }
        
        .log-time {
            color: #666;
            font-size: 12px;
            margin-bottom: 5px;
        }
        
        .log-message {
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .log-details {
            color: #666;
            font-size: 12px;
        }
        
        .refresh-btn {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background: #00B900;
            color: white;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 24px;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0,185,0,0.3);
            transition: all 0.3s;
        }
        
        .refresh-btn:hover {
            transform: scale(1.1);
        }
    </style>
</head>
<body>
    <div class="admin-container">
        <div class="header">
            <h1>üìä Ë≥áÊñôÂ∫´ÁÆ°ÁêÜÂæåÂè∞</h1>
            <p>LINE Bot Ë≥áÊñôÂàÜÊûêËàáÁÆ°ÁêÜÁ≥ªÁµ±</p>
        </div>
        
        <div class="content">
            <!-- Â∞éËà™ÊåâÈàï -->
            <div class="nav-buttons">
                <a href="/admin/dashboard" class="nav-btn">üìä Á∏ΩË¶Ω</a>
                <a href="/admin/members" class="nav-btn">üë• ÊúÉÂì°ÁÆ°ÁêÜ</a>
                <a href="/admin/chats" class="nav-btn">üí¨ Â∞çË©±Ë®òÈåÑ</a>
                <a href="/admin/tasks" class="nav-btn">üìã ‰ªªÂãôÁÆ°ÁêÜ</a>
                <a href="/admin/logs" class="nav-btn">üìú Á≥ªÁµ±Êó•Ë™å</a>
            </div>
            
            <!-- Áµ±Ë®àË≥áÊñô -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">${stats.totalMembers}</div>
                    <div class="stat-label">Ë®ªÂÜäÊúÉÂì°</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${stats.totalChatLogs}</div>
                    <div class="stat-label">Â∞çË©±Ë®òÈåÑ</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${stats.totalTasks}</div>
                    <div class="stat-label">Âª∫Á´ã‰ªªÂãô</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${stats.activeMembersToday}</div>
                    <div class="stat-label">‰ªäÊó•Ê¥ªË∫çÁî®Êà∂</div>
                </div>
            </div>
            
            <!-- Á≥ªÁµ±Êó•Ë™å -->
            <div class="section">
                <div class="section-title">
                    <span>üìú</span>
                    <span>ÊúÄÊñ∞Á≥ªÁµ±Êó•Ë™å</span>
                </div>
                <div class="logs-container">
                    ${systemLogs.map(log => `
                        <div class="log-item log-${log.level}">
                            <div class="log-time">${new Date(log.created_at).toLocaleString('zh-TW')}</div>
                            <div class="log-message">[${log.level.toUpperCase()}] ${log.category}: ${log.message}</div>
                            ${log.details ? `<div class="log-details">${log.details}</div>` : ''}
                        </div>
                    `).join('')}
                </div>
            </div>
        </div>
    </div>
    
    <button class="refresh-btn" onclick="window.location.reload()">üîÑ</button>
    
    <script>
        // Ëá™ÂãïÂà∑Êñ∞È†ÅÈù¢
        setInterval(() => {
            window.location.reload();
        }, 30000); // 30ÁßíÂà∑Êñ∞‰∏ÄÊ¨°
    </script>
</body>
</html>
    `;
    
    res.send(html);
    
  } catch (error) {
    console.error('Admin dashboard error:', error);
    res.status(500).send('Ë≥áÊñôÂ∫´ÁÆ°ÁêÜ‰ªãÈù¢ËºâÂÖ•Â§±Êïó');
  }
});

// ÊúÉÂì°ÁÆ°ÁêÜÈ†ÅÈù¢
app.get('/admin/members', async (req, res) => {
  try {
    const members = await database.query(`
      SELECT m.*, 
             COUNT(c.id) as chat_count,
             COUNT(t.id) as task_count
      FROM members m
      LEFT JOIN chat_logs c ON m.line_user_id = c.line_user_id
      LEFT JOIN tasks t ON m.line_user_id = t.line_user_id
      GROUP BY m.id
      ORDER BY m.created_at DESC
    `);
    
    const html = `
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üë• ÊúÉÂì°ÁÆ°ÁêÜ - Ë≥áÊñôÂ∫´ÂæåÂè∞</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }
        .admin-container { max-width: 1400px; margin: 0 auto; background: white; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); overflow: hidden; }
        .header { background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 30px; text-align: center; }
        .header h1 { font-size: 28px; margin-bottom: 5px; }
        .content { padding: 30px; }
        .nav-buttons { display: flex; gap: 15px; margin-bottom: 30px; flex-wrap: wrap; }
        .nav-btn { background: #667eea; color: white; padding: 12px 25px; border: none; border-radius: 8px; text-decoration: none; font-weight: bold; transition: all 0.3s; }
        .nav-btn:hover { background: #5a6fd8; transform: translateY(-2px); }
        .table-container { background: #f8f9ff; border-radius: 15px; padding: 20px; overflow-x: auto; }
        table { width: 100%; border-collapse: collapse; margin-top: 10px; }
        th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background: #667eea; color: white; font-weight: bold; }
        tr:hover { background: #f5f5f5; }
        .status-active { color: #00B900; font-weight: bold; }
        .status-inactive { color: #999; }
        .stats-badge { background: #e3f2fd; color: #1976d2; padding: 4px 8px; border-radius: 12px; font-size: 12px; }
    </style>
</head>
<body>
    <div class="admin-container">
        <div class="header">
            <h1>üë• ÊúÉÂì°ÁÆ°ÁêÜ</h1>
            <p>Ë®ªÂÜäÊúÉÂì°Ê∏ÖÂñÆËàáÊ¥ªÂãïÁµ±Ë®à</p>
        </div>
        
        <div class="content">
            <div class="nav-buttons">
                <a href="/admin/dashboard" class="nav-btn">üìä ËøîÂõûÁ∏ΩË¶Ω</a>
                <a href="/admin/chats" class="nav-btn">üí¨ Â∞çË©±Ë®òÈåÑ</a>
                <a href="/admin/tasks" class="nav-btn">üìã ‰ªªÂãôÁÆ°ÁêÜ</a>
            </div>
            
            <div class="table-container">
                <h3>ÊúÉÂì°Ê∏ÖÂñÆ (ÂÖ± ${members.length} ‰Ωç)</h3>
                <table>
                    <thead>
                        <tr>
                            <th>ÊúÉÂì°ID</th>
                            <th>LINEÁî®Êà∂ID</th>
                            <th>ÂßìÂêç/È°ØÁ§∫ÂêçÁ®±</th>
                            <th>ÈõªÂ≠êÈÉµ‰ª∂</th>
                            <th>Ë®ªÂÜäÊñπÂºè</th>
                            <th>ÁãÄÊÖã</th>
                            <th>Â∞çË©±Êï∏</th>
                            <th>‰ªªÂãôÊï∏</th>
                            <th>Ë®ªÂÜäÊôÇÈñì</th>
                            <th>ÊúÄÂæåÊ¥ªÂãï</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${members.map(member => `
                            <tr>
                                <td><code>${member.member_id}</code></td>
                                <td><code>${member.line_user_id || 'Êú™Á∂ÅÂÆö'}</code></td>
                                <td>${member.display_name || member.name || 'Êú™Ë®≠ÂÆö'}</td>
                                <td>${member.email || 'Êú™Êèê‰æõ'}</td>
                                <td>${member.registration_method}</td>
                                <td class="${member.is_active ? 'status-active' : 'status-inactive'}">
                                    ${member.is_active ? '‚úÖ ÂïüÁî®' : '‚ùå ÂÅúÁî®'}
                                </td>
                                <td><span class="stats-badge">${member.chat_count}</span></td>
                                <td><span class="stats-badge">${member.task_count}</span></td>
                                <td>${new Date(member.created_at).toLocaleDateString('zh-TW')}</td>
                                <td>${member.last_activity_at ? new Date(member.last_activity_at).toLocaleString('zh-TW') : 'ÁÑ°'}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</body>
</html>
    `;
    
    res.send(html);
    
  } catch (error) {
    console.error('Members admin error:', error);
    res.status(500).send('ÊúÉÂì°ÁÆ°ÁêÜÈ†ÅÈù¢ËºâÂÖ•Â§±Êïó');
  }
});

// Â∞çË©±Ë®òÈåÑÁÆ°ÁêÜÈ†ÅÈù¢
app.get('/admin/chats', async (req, res) => {
  try {
    const chatLogs = await database.query(`
      SELECT c.*, m.display_name, m.name
      FROM chat_logs c
      LEFT JOIN members m ON c.line_user_id = m.line_user_id
      ORDER BY c.created_at DESC
      LIMIT 100
    `);
    
    const html = `
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üí¨ Â∞çË©±Ë®òÈåÑ - Ë≥áÊñôÂ∫´ÂæåÂè∞</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }
        .admin-container { max-width: 1400px; margin: 0 auto; background: white; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); overflow: hidden; }
        .header { background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 30px; text-align: center; }
        .content { padding: 30px; }
        .nav-buttons { display: flex; gap: 15px; margin-bottom: 30px; flex-wrap: wrap; }
        .nav-btn { background: #667eea; color: white; padding: 12px 25px; border: none; border-radius: 8px; text-decoration: none; font-weight: bold; transition: all 0.3s; }
        .chat-item { background: #f8f9ff; border-radius: 12px; padding: 20px; margin-bottom: 15px; border-left: 5px solid; }
        .chat-incoming { border-left-color: #00B900; }
        .chat-outgoing { border-left-color: #2196F3; }
        .chat-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; }
        .chat-user { font-weight: bold; color: #333; }
        .chat-time { color: #666; font-size: 12px; }
        .chat-content { color: #333; line-height: 1.5; margin-bottom: 10px; }
        .chat-meta { display: flex; gap: 15px; font-size: 12px; color: #666; }
        .meta-badge { background: #e3f2fd; color: #1976d2; padding: 2px 8px; border-radius: 10px; }
    </style>
</head>
<body>
    <div class="admin-container">
        <div class="header">
            <h1>üí¨ Â∞çË©±Ë®òÈåÑ</h1>
            <p>LINE Bot ‰∫íÂãïË®òÈåÑÂàÜÊûê (ÊúÄÊñ∞ 100 Á≠Ü)</p>
        </div>
        
        <div class="content">
            <div class="nav-buttons">
                <a href="/admin/dashboard" class="nav-btn">üìä ËøîÂõûÁ∏ΩË¶Ω</a>
                <a href="/admin/members" class="nav-btn">üë• ÊúÉÂì°ÁÆ°ÁêÜ</a>
                <a href="/admin/tasks" class="nav-btn">üìã ‰ªªÂãôÁÆ°ÁêÜ</a>
            </div>
            
            <div class="chats-container">
                ${chatLogs.map(chat => `
                    <div class="chat-item chat-${chat.direction}">
                        <div class="chat-header">
                            <div class="chat-user">
                                ${chat.display_name || chat.name || chat.line_user_id} 
                                ${chat.direction === 'incoming' ? 'üë§ ‚Üí ü§ñ' : 'ü§ñ ‚Üí üë§'}
                            </div>
                            <div class="chat-time">${new Date(chat.created_at).toLocaleString('zh-TW')}</div>
                        </div>
                        <div class="chat-content">${chat.content}</div>
                        <div class="chat-meta">
                            <span class="meta-badge">È°ûÂûã: ${chat.message_type}</span>
                            ${chat.intent_detected ? `<span class="meta-badge">ÊÑèÂúñ: ${chat.intent_detected}</span>` : ''}
                            ${chat.response_type ? `<span class="meta-badge">ÂõûÊáâ: ${chat.response_type}</span>` : ''}
                            ${chat.processing_time ? `<span class="meta-badge">ËôïÁêÜÊôÇÈñì: ${chat.processing_time}ms</span>` : ''}
                            <span class="meta-badge ${chat.is_successful ? 'success' : 'error'}">
                                ${chat.is_successful ? '‚úÖ ÊàêÂäü' : '‚ùå Â§±Êïó'}
                            </span>
                        </div>
                    </div>
                `).join('')}
            </div>
        </div>
    </div>
</body>
</html>
    `;
    
    res.send(html);
    
  } catch (error) {
    console.error('Chats admin error:', error);
    res.status(500).send('Â∞çË©±Ë®òÈåÑÈ†ÅÈù¢ËºâÂÖ•Â§±Êïó');
  }
});

// ================================
// LINE LIFF App ÂäüËÉΩ
// ================================

// LINE LIFF ‰ªªÂãôÁÆ°ÁêÜÈ†ÅÈù¢
app.get('/liff/tasks', (req, res) => {
  const html = `
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìù LINE ‰ªªÂãôÁÆ°ÁêÜ - LIFF App</title>
    <script src="https://static.line-scdn.net/liff/edge/2/sdk.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            margin: 0;
            padding: 0;
            /* ÈáùÂ∞ç LIFF Full Ê®°ÂºèÂÑ™Âåñ */
            width: 100vw;
            overflow-x: hidden;
        }
        
        .liff-container {
            /* LIFF Full Ê®°ÂºèÔºö‰ΩøÁî®ÂÖ®Ëû¢ÂπïÂØ¨Â∫¶ */
            width: 100%;
            max-width: 100vw;
            margin: 0;
            background: white;
            /* Full Ê®°Âºè‰∏çÈúÄË¶ÅÂúìËßíÂíåÈô∞ÂΩ± */
            border-radius: 0;
            box-shadow: none;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        .header {
            background: linear-gradient(135deg, #00B900, #06C755);
            color: white;
            padding: 20px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 24px;
            margin-bottom: 5px;
        }
        
        .user-info {
            background: rgba(255,255,255,0.1);
            border-radius: 10px;
            padding: 10px;
            margin-top: 15px;
            font-size: 14px;
        }
        
        .content {
            padding: 15px;
            flex: 1;
            /* LIFF Full Ê®°ÂºèÔºöÁ¢∫‰øùÂÖßÂÆπÂèØÊªæÂãï */
            overflow-y: auto;
        }
        
        .add-task-section {
            background: #f8f9ff;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .add-task-title {
            color: #333;
            font-weight: bold;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .task-input {
            width: 100%;
            padding: 15px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 16px;
            margin-bottom: 15px;
            transition: border-color 0.3s;
        }
        
        .task-input:focus {
            outline: none;
            border-color: #00B900;
        }
        
        .add-btn {
            width: 100%;
            background: linear-gradient(135deg, #00B900, #06C755);
            color: white;
            border: none;
            border-radius: 10px;
            padding: 15px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .add-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,185,0,0.3);
        }
        
        .tasks-section {
            margin-top: 20px;
        }
        
        .tasks-title {
            color: #333;
            font-weight: bold;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .task-count {
            background: #00B900;
            color: white;
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 12px;
        }
        
        .task-list {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .task-item {
            background: white;
            border: 1px solid #e1e5e9;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: all 0.3s;
        }
        
        .task-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        
        .task-content {
            font-size: 16px;
            color: #333;
            margin-bottom: 8px;
        }
        
        .task-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 12px;
            color: #666;
        }
        
        .task-time {
            background: #f0f0f0;
            padding: 4px 8px;
            border-radius: 5px;
        }
        
        .delete-btn {
            background: #ff4757;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 5px 10px;
            font-size: 12px;
            cursor: pointer;
            transition: background 0.3s;
        }
        
        .delete-btn:hover {
            background: #ff3742;
        }
        
        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #666;
        }
        
        .empty-state .emoji {
            font-size: 48px;
            margin-bottom: 15px;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }
        
        .error {
            background: #ffe6e6;
            border: 1px solid #ffcccc;
            color: #cc0000;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        
        .success {
            background: #e6ffe6;
            border: 1px solid #ccffcc;
            color: #006600;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        
        .refresh-btn {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 50%;
            width: 56px;
            height: 56px;
            font-size: 24px;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(102,126,234,0.3);
            transition: all 0.3s;
        }
        
        .refresh-btn:hover {
            transform: scale(1.1);
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .spinning {
            animation: spin 1s linear infinite;
        }
        
        .liff-demo-mode {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            font-size: 14px;
            color: #856404;
            text-align: center;
        }
        
        .filter-section {
            background: #f8f9ff;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .filter-title {
            color: #333;
            font-weight: bold;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .filter-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .filter-btn {
            background: white;
            border: 2px solid #e1e5e9;
            color: #666;
            padding: 10px 20px;
            border-radius: 25px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s;
            flex: 1;
            min-width: 100px;
        }
        
        .filter-btn:hover {
            border-color: #00B900;
            color: #00B900;
        }
        
        .filter-btn.active {
            background: linear-gradient(135deg, #00B900, #06C755);
            border-color: #00B900;
            color: white;
            transform: scale(1.05);
        }
        
        .task-date-group {
            margin-bottom: 25px;
        }
        
        .date-header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 12px 20px;
            border-radius: 10px;
            font-weight: bold;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .date-count {
            background: rgba(255,255,255,0.2);
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
        }
        
        /* LIFF Full Ê®°ÂºèÂ∞àÁî®Ê®£Âºè */
        @media screen and (max-width: 768px) {
            .liff-container {
                border-radius: 0;
            }
            
            .header {
                border-radius: 0;
                padding: 20px 15px;
            }
            
            .content {
                padding: 10px 15px;
            }
            
            .task-list {
                max-height: none; /* Full Ê®°Âºè‰∏çÈôêÂà∂È´òÂ∫¶ */
            }
        }
        
        /* Á¢∫‰øù LIFF Âú® LINE App ‰∏≠Ê≠£Á¢∫È°ØÁ§∫ */
        html, body {
            height: 100%;
            width: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
</head>
<body>
    <div class="liff-container">
        <div class="header">
            <h1>üìù ÊàëÁöÑ‰ªªÂãôÁÆ°ÁêÜ</h1>
            <p>ÈÄèÈÅé LINE LIFF ÁÆ°ÁêÜÊÇ®ÁöÑÂæÖËæ¶‰∫ãÈ†Ö</p>
            <div class="user-info" id="userInfo">
                <div>ËºâÂÖ•Áî®Êà∂Ë≥áË®ä‰∏≠...</div>
            </div>
        </div>
        
        <div class="content">
            <!-- Demo Ê®°ÂºèË™™Êòé -->
            <div class="liff-demo-mode">
                <strong>üì± LIFF App Demo Ê®°Âºè</strong><br>
                Ê≠§ÁÇ∫Â±ïÁ§∫ÁâàÊú¨ÔºåÂØ¶Èöõ‰ΩøÁî®ÈúÄË¶ÅÂú® LINE Developers Console ‰∏≠Ë®≠ÂÆö LIFF App
            </div>
            
            <!-- Êñ∞Â¢û‰ªªÂãôÂçÄÂüü -->
            <div class="add-task-section">
                <div class="add-task-title">
                    <span>‚úèÔ∏è</span>
                    <span>Êñ∞Â¢û‰ªªÂãô</span>
                </div>
                <input type="text" id="taskInput" class="task-input" placeholder="‰æãÂ¶ÇÔºö17:00Ë∑üÂ∞èÁæéÁ¥ÑÊúÉ„ÄÅË≤∑ÁâõÂ•∂„ÄÅÂÆåÊàêÂ†±Âëä...">
                <button onclick="addTask()" class="add-btn">‚ûï Êñ∞Â¢û‰ªªÂãô</button>
            </div>
            
            <!-- Ë®äÊÅØÈ°ØÁ§∫ÂçÄÂüü -->
            <div id="messageArea"></div>
            
            <!-- ‰ªªÂãôÁØ©ÈÅ∏ÂçÄÂüü -->
            <div class="filter-section">
                <div class="filter-title">üîç ÁØ©ÈÅ∏‰ªªÂãô</div>
                <div class="filter-buttons">
                    <button class="filter-btn active" onclick="filterTasks('all')">ÂÖ®ÈÉ®‰ªªÂãô</button>
                    <button class="filter-btn" onclick="filterTasks('today')">‰ªäÊó•‰ªªÂãô</button>
                    <button class="filter-btn" onclick="filterTasks('week')">Êú¨ÈÄ±‰ªªÂãô</button>
                </div>
            </div>

            <!-- ‰ªªÂãôÂàóË°®ÂçÄÂüü -->
            <div class="tasks-section">
                <div class="tasks-title">
                    <span id="taskSectionTitle">üìã ÂÖ®ÈÉ®‰ªªÂãô</span>
                    <span class="task-count" id="taskCount">0 È†Ö</span>
                </div>
                <div id="taskList" class="task-list">
                    <div class="loading">ËºâÂÖ•‰ªªÂãô‰∏≠...</div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- ÈáçÊñ∞Êï¥ÁêÜÊåâÈàï -->
    <button class="refresh-btn" onclick="refreshTasks()" id="refreshBtn">üîÑ</button>
    
    <script>
        let liffProfile = null;
        let tasks = [];
        let isLiffAvailable = false;
        
        // ÂàùÂßãÂåñÊáâÁî®Á®ãÂºè
        window.onload = function() {
            // Ê™¢Êü•ÊòØÂê¶Âú® LINE Áí∞Â¢É‰∏≠
            if (typeof liff !== 'undefined') {
                initializeLiff();
            } else {
                // Demo Ê®°ÂºèÔºå‰ΩøÁî®Ê®°Êì¨Ë≥áÊñô
                initializeDemoMode();
            }
        };
        
        function initializeLiff() {
            liff.init({
                liffId: '${process.env.LINE_LIFF_ID || 'demo-mode'}' 
            }).then(() => {
                console.log('LIFF ÂàùÂßãÂåñÊàêÂäü');
                isLiffAvailable = true;
                initializeApp();
            }).catch((err) => {
                console.error('LIFF ÂàùÂßãÂåñÂ§±Êïó:', err);
                initializeDemoMode();
            });
        }
        
        function initializeDemoMode() {
            console.log('ÈÄ≤ÂÖ• Demo Ê®°Âºè');
            liffProfile = {
                displayName: 'Demo Áî®Êà∂',
                userId: 'demo-user-id'
            };
            updateUserInfo();
            loadTasks();
        }
        
        async function initializeApp() {
            try {
                if (liff.isLoggedIn()) {
                    liffProfile = await liff.getProfile();
                    updateUserInfo();
                } else {
                    // ÂòóË©¶ÁôªÂÖ•
                    liff.login();
                    return;
                }
                
                await loadTasks();
            } catch (error) {
                console.error('ÂàùÂßãÂåñÊáâÁî®Á®ãÂºèÂ§±Êïó:', error);
                showError('ËºâÂÖ•ÊáâÁî®Á®ãÂºèÊôÇÁôºÁîüÈåØË™§');
            }
        }
        
        function updateUserInfo() {
            if (liffProfile) {
                document.getElementById('userInfo').innerHTML = \`
                    <div>üëã Ê≠°ËøéÔºå\${liffProfile.displayName}!</div>
                    <div>üÜî USER ID: \${liffProfile.userId}</div>
                    <div>\${isLiffAvailable ? 'üì± LIFF Ê®°Âºè' : 'üåê Demo Ê®°Âºè'}</div>
                \`;
            }
        }
        
        async function loadTasks() {
            try {
                const userId = liffProfile ? liffProfile.userId : 'demo-user';
                const response = await fetch(\`/api/tasks/\${userId}\`);
                const data = await response.json();
                
                if (data.success) {
                    tasks = data.tasks || [];
                    renderTasks();
                } else {
                    showError('ËºâÂÖ•‰ªªÂãôÂ§±Êïó: ' + data.message);
                }
            } catch (error) {
                console.error('ËºâÂÖ•‰ªªÂãôÈåØË™§:', error);
                // Demo Ê®°Âºè‰ΩøÁî®Êú¨Âú∞ÂÑ≤Â≠ò
                loadTasksFromStorage();
            }
        }
        
        function loadTasksFromStorage() {
            const storedTasks = localStorage.getItem('demo-tasks');
            tasks = storedTasks ? JSON.parse(storedTasks) : [];
            renderTasks();
        }
        
        function saveTasksToStorage() {
            localStorage.setItem('demo-tasks', JSON.stringify(tasks));
        }
        
        let currentFilter = 'all';
        
        function renderTasks(filter = currentFilter) {
            const taskList = document.getElementById('taskList');
            const taskCount = document.getElementById('taskCount');
            const taskSectionTitle = document.getElementById('taskSectionTitle');
            
            // Ê†πÊìöÁØ©ÈÅ∏Ê¢ù‰ª∂ÈÅéÊøæ‰ªªÂãô
            let filteredTasks = tasks;
            let titleText = 'üìã ÂÖ®ÈÉ®‰ªªÂãô';
            
            if (filter === 'today') {
                const today = new Date().toLocaleDateString('zh-TW');
                filteredTasks = tasks.filter(task => task.date === today);
                titleText = 'üìã ‰ªäÊó•‰ªªÂãô';
            } else if (filter === 'week') {
                const now = new Date();
                const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                filteredTasks = tasks.filter(task => new Date(task.timestamp) >= weekAgo);
                titleText = 'üìã Êú¨ÈÄ±‰ªªÂãô';
            }
            
            taskSectionTitle.textContent = titleText;
            taskCount.textContent = \`\${filteredTasks.length} È†Ö\`;
            
            if (filteredTasks.length === 0) {
                const emptyMessage = filter === 'today' ? '‰ªäÂ§©ÈÇÑÊ≤íÊúâ‰ªª‰ΩïÂæÖËæ¶‰∫ãÈ†Ö' : 
                                   filter === 'week' ? 'Êú¨ÈÄ±ÈÇÑÊ≤íÊúâ‰ªª‰ΩïÂæÖËæ¶‰∫ãÈ†Ö' : 
                                   'ÈÇÑÊ≤íÊúâ‰ªª‰Ωï‰ªªÂãô';
                taskList.innerHTML = \`
                    <div class="empty-state">
                        <div class="emoji">üéâ</div>
                        <div>\${filter === 'today' ? '‰ªäÊó•‰ªªÂãôÂÖ®ÈÉ®ÂÆåÊàêÔºÅ' : 'Êö´ÁÑ°‰ªªÂãô'}</div>
                        <div>\${emptyMessage}</div>
                    </div>
                \`;
                return;
            }
            
            // ÊåâÊó•ÊúüÂàÜÁµÑÈ°ØÁ§∫‰ªªÂãô
            const tasksByDate = groupTasksByDate(filteredTasks);
            let taskHTML = '';
            
            for (const [date, dateTasks] of Object.entries(tasksByDate)) {
                taskHTML += \`
                    <div class="task-date-group">
                        <div class="date-header">
                            <span>\${formatDate(date)}</span>
                            <span class="date-count">\${dateTasks.length} È†Ö</span>
                        </div>
                        <div class="date-tasks">
                            \${dateTasks.map((task, index) => \`
                                <div class="task-item">
                                    <div class="task-content">\${task.text}</div>
                                    <div class="task-meta">
                                        <span class="task-time">\${new Date(task.timestamp).toLocaleTimeString('zh-TW', { hour: '2-digit', minute: '2-digit' })}</span>
                                        <button class="delete-btn" onclick="deleteTaskById('\${task.id}')">üóëÔ∏è Âà™Èô§</button>
                                    </div>
                                </div>
                            \`).join('')}
                        </div>
                    </div>
                \`;
            }
            
            taskList.innerHTML = taskHTML;
        }
        
        function groupTasksByDate(tasks) {
            const grouped = {};
            
            tasks.forEach(task => {
                const date = task.date || new Date(task.timestamp).toLocaleDateString('zh-TW');
                if (!grouped[date]) {
                    grouped[date] = [];
                }
                grouped[date].push(task);
            });
            
            // ÊåâÊó•ÊúüÊéíÂ∫èÔºàÊúÄÊñ∞ÁöÑÂú®ÂâçÔºâ
            const sortedEntries = Object.entries(grouped).sort((a, b) => {
                return new Date(b[0]) - new Date(a[0]);
            });
            
            return Object.fromEntries(sortedEntries);
        }
        
        function formatDate(dateStr) {
            const date = new Date(dateStr);
            const today = new Date();
            const yesterday = new Date(today);
            yesterday.setDate(yesterday.getDate() - 1);
            
            if (date.toDateString() === today.toDateString()) {
                return 'üìÖ ‰ªäÂ§© ' + dateStr;
            } else if (date.toDateString() === yesterday.toDateString()) {
                return 'üìÖ Êò®Â§© ' + dateStr;
            } else {
                const weekdays = ['Êó•', '‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠'];
                const weekday = weekdays[date.getDay()];
                return \`üìÖ \${dateStr} (ÈÄ±\${weekday})\`;
            }
        }
        
        function filterTasks(filter) {
            currentFilter = filter;
            
            // Êõ¥Êñ∞ÁØ©ÈÅ∏ÊåâÈàïÁöÑÁãÄÊÖã
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            renderTasks(filter);
        }
        
        async function addTask() {
            const taskInput = document.getElementById('taskInput');
            const taskText = taskInput.value.trim();
            
            if (!taskText) {
                showError('Ë´ãËº∏ÂÖ•‰ªªÂãôÂÖßÂÆπ');
                return;
            }
            
            const newTask = {
                id: Date.now(),
                text: taskText,
                timestamp: new Date().toISOString(),
                date: new Date().toLocaleDateString('zh-TW')
            };
            
            try {
                const userId = liffProfile ? liffProfile.userId : 'demo-user';
                const response = await fetch('/api/tasks/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        userId: userId,
                        taskText: taskText
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    taskInput.value = '';
                    showSuccess('‰ªªÂãôÊñ∞Â¢ûÊàêÂäüÔºÅ');
                    await loadTasks();
                } else {
                    showError('Êñ∞Â¢û‰ªªÂãôÂ§±Êïó: ' + data.message);
                }
            } catch (error) {
                console.error('Êñ∞Â¢û‰ªªÂãôÈåØË™§:', error);
                // Demo Ê®°ÂºèÊú¨Âú∞ËôïÁêÜ
                tasks.push(newTask);
                saveTasksToStorage();
                taskInput.value = '';
                showSuccess('‰ªªÂãôÊñ∞Â¢ûÊàêÂäüÔºÅÔºàDemo Ê®°ÂºèÔºâ');
                renderTasks();
            }
        }
        
        async function deleteTaskById(taskId) {
            if (!confirm('Á¢∫ÂÆöË¶ÅÂà™Èô§ÈÄôÂÄã‰ªªÂãôÂóéÔºü')) {
                return;
            }
            
            try {
                const userId = liffProfile ? liffProfile.userId : 'demo-user';
                const taskIndex = tasks.findIndex(task => task.id == taskId);
                if (taskIndex === -1) {
                    showError('Êâæ‰∏çÂà∞Ë©≤‰ªªÂãô');
                    return;
                }
                const task = tasks[taskIndex];
                
                const response = await fetch('/api/tasks/delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        userId: userId,
                        taskId: task.id
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showSuccess('‰ªªÂãôÂ∑≤Âà™Èô§');
                    await loadTasks();
                } else {
                    showError('Âà™Èô§‰ªªÂãôÂ§±Êïó: ' + data.message);
                }
            } catch (error) {
                console.error('Âà™Èô§‰ªªÂãôÈåØË™§:', error);
                // Demo Ê®°ÂºèÊú¨Âú∞ËôïÁêÜ
                tasks.splice(taskIndex, 1);
                saveTasksToStorage();
                showSuccess('‰ªªÂãôÂ∑≤Âà™Èô§ÔºàDemo Ê®°ÂºèÔºâ');
                renderTasks();
            }
        }
        
        async function refreshTasks() {
            const refreshBtn = document.getElementById('refreshBtn');
            refreshBtn.classList.add('spinning');
            
            await loadTasks();
            
            setTimeout(() => {
                refreshBtn.classList.remove('spinning');
            }, 1000);
        }
        
        function showError(message) {
            showMessage(message, 'error');
        }
        
        function showSuccess(message) {
            showMessage(message, 'success');
        }
        
        function showMessage(message, type) {
            const messageArea = document.getElementById('messageArea');
            const messageDiv = document.createElement('div');
            messageDiv.className = type;
            messageDiv.textContent = message;
            
            messageArea.innerHTML = '';
            messageArea.appendChild(messageDiv);
            
            setTimeout(() => {
                messageArea.innerHTML = '';
            }, 3000);
        }
        
        // Enter ÈçµÊñ∞Â¢û‰ªªÂãô
        document.getElementById('taskInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                addTask();
            }
        });
    </script>
</body>
</html>
  `;
  
  res.send(html);
});

// LIFF API Á´ØÈªû - ÂèñÂæóÁî®Êà∂‰ªªÂãô
app.get('/api/tasks/:userId', (req, res) => {
  const userId = req.params.userId;
  const userTaskList = userTasks.get(userId) || [];
  
  res.json({
    success: true,
    tasks: userTaskList,
    count: userTaskList.length
  });
});

// LIFF API Á´ØÈªû - Êñ∞Â¢û‰ªªÂãô
app.post('/api/tasks/add', express.json(), (req, res) => {
  const { userId, taskText } = req.body;
  
  if (!userId || !taskText) {
    return res.json({
      success: false,
      message: 'Áº∫Â∞ëÂøÖË¶ÅÂèÉÊï∏'
    });
  }
  
  // Âª∫Á´ãÊñ∞‰ªªÂãô
  const newTask = {
    id: Date.now(),
    text: taskText,
    timestamp: new Date().toISOString(),
    date: new Date().toLocaleDateString('zh-TW')
  };
  
  // ÂÑ≤Â≠òÂà∞Áî®Êà∂‰ªªÂãôÂàóË°®
  let userTaskList = userTasks.get(userId) || [];
  userTaskList.push(newTask);
  userTasks.set(userId, userTaskList);
  
  res.json({
    success: true,
    message: '‰ªªÂãôÊñ∞Â¢ûÊàêÂäü',
    task: newTask
  });
});

// LIFF API Á´ØÈªû - Âà™Èô§‰ªªÂãô
app.post('/api/tasks/delete', express.json(), (req, res) => {
  const { userId, taskId } = req.body;
  
  if (!userId || !taskId) {
    return res.json({
      success: false,
      message: 'Áº∫Â∞ëÂøÖË¶ÅÂèÉÊï∏'
    });
  }
  
  let userTaskList = userTasks.get(userId) || [];
  const originalLength = userTaskList.length;
  
  // Âà™Èô§ÊåáÂÆö‰ªªÂãô
  userTaskList = userTaskList.filter(task => task.id !== taskId);
  userTasks.set(userId, userTaskList);
  
  if (userTaskList.length < originalLength) {
    res.json({
      success: true,
      message: '‰ªªÂãôÂ∑≤Âà™Èô§'
    });
  } else {
    res.json({
      success: false,
      message: 'Êâæ‰∏çÂà∞ÊåáÂÆö‰ªªÂãô'
    });
  }
});

// ÂàùÂßãÂåñË≥áÊñôÂ∫´
async function initializeApp() {
  try {
    console.log('üîÑ Ê≠£Âú®ÂàùÂßãÂåñË≥áÊñôÂ∫´...');
    await database.init();
    console.log('‚úÖ Ë≥áÊñôÂ∫´ÂàùÂßãÂåñÂÆåÊàê');
    
    // Ë®òÈåÑÁ≥ªÁµ±ÂïüÂãï
    await database.logSystem('info', 'system', 'Application started', {
      port: PORT,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Ë≥áÊñôÂ∫´ÂàùÂßãÂåñÂ§±Êïó:', error);
    process.exit(1);
  }
}

const PORT = process.env.PORT || 3000;

// ÂïüÂãïÊáâÁî®Á®ãÂºè
initializeApp().then(() => {
  app.listen(PORT, () => {
    console.log(`üöÄ Bot is running on port ${PORT}`);
    console.log(`üìä Ë≥áÊñôÂ∫´Â∑≤ÈÄ£Êé•‰∏¶ÂèØ‰ΩøÁî®`);
  });
}).catch((error) => {
  console.error('‚ùå ÊáâÁî®Á®ãÂºèÂïüÂãïÂ§±Êïó:', error);
  process.exit(1);
});

// ÂÑ™ÈõÖÈóúÈñâËôïÁêÜ
process.on('SIGINT', async () => {
  console.log('\nüîÑ Ê≠£Âú®ÈóúÈñâÊáâÁî®Á®ãÂºè...');
  
  try {
    await database.logSystem('info', 'system', 'Application shutting down');
    database.close();
    console.log('‚úÖ ÊáâÁî®Á®ãÂºèÂ∑≤ÂÆâÂÖ®ÈóúÈñâ');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå ÈóúÈñâÈÅéÁ®ã‰∏≠ÁôºÁîüÈåØË™§:', error);
    process.exit(1);
  }
});
